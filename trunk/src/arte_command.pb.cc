// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "arte_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ArteCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArteCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetThresholdCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetThresholdCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SetThresholdCommand_ThresholdUnits_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SetPostsampsCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPostsampsCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetClockCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetClockCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DiskCommand_NewState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClockAndDiskCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClockAndDiskCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearProjectionsCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearProjectionsCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearLfpbankCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearLfpbankCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaximizeViewCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaximizeViewCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_arte_5fcommand_2eproto() {
  protobuf_AddDesc_arte_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "arte_command.proto");
  GOOGLE_CHECK(file != NULL);
  ArteCommand_descriptor_ = file->message_type(0);
  static const int ArteCommand_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, destination_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, message_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, set_thresh_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, set_postsamps_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, reset_clock_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, disk_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, clock_and_disk_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, clear_projections_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, clear_lfpbank_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, maximize_view_command_),
  };
  ArteCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArteCommand_descriptor_,
      ArteCommand::default_instance_,
      ArteCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArteCommand));
  SetThresholdCommand_descriptor_ = file->message_type(1);
  static const int SetThresholdCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetThresholdCommand, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetThresholdCommand, trodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetThresholdCommand, chanind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetThresholdCommand, units_),
  };
  SetThresholdCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetThresholdCommand_descriptor_,
      SetThresholdCommand::default_instance_,
      SetThresholdCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetThresholdCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetThresholdCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetThresholdCommand));
  SetThresholdCommand_ThresholdUnits_descriptor_ = SetThresholdCommand_descriptor_->enum_type(0);
  SetPostsampsCommand_descriptor_ = file->message_type(2);
  static const int SetPostsampsCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPostsampsCommand, postsamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPostsampsCommand, trodename_),
  };
  SetPostsampsCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPostsampsCommand_descriptor_,
      SetPostsampsCommand::default_instance_,
      SetPostsampsCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPostsampsCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPostsampsCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPostsampsCommand));
  ResetClockCommand_descriptor_ = file->message_type(3);
  static const int ResetClockCommand_offsets_[1] = {
  };
  ResetClockCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetClockCommand_descriptor_,
      ResetClockCommand::default_instance_,
      ResetClockCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetClockCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetClockCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetClockCommand));
  DiskCommand_descriptor_ = file->message_type(4);
  static const int DiskCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskCommand, new_state_),
  };
  DiskCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskCommand_descriptor_,
      DiskCommand::default_instance_,
      DiskCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskCommand));
  DiskCommand_NewState_descriptor_ = DiskCommand_descriptor_->enum_type(0);
  ClockAndDiskCommand_descriptor_ = file->message_type(5);
  static const int ClockAndDiskCommand_offsets_[1] = {
  };
  ClockAndDiskCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClockAndDiskCommand_descriptor_,
      ClockAndDiskCommand::default_instance_,
      ClockAndDiskCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockAndDiskCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockAndDiskCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClockAndDiskCommand));
  ClearProjectionsCommand_descriptor_ = file->message_type(6);
  static const int ClearProjectionsCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearProjectionsCommand, trodename_),
  };
  ClearProjectionsCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearProjectionsCommand_descriptor_,
      ClearProjectionsCommand::default_instance_,
      ClearProjectionsCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearProjectionsCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearProjectionsCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearProjectionsCommand));
  ClearLfpbankCommand_descriptor_ = file->message_type(7);
  static const int ClearLfpbankCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearLfpbankCommand, lfpbankname_),
  };
  ClearLfpbankCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearLfpbankCommand_descriptor_,
      ClearLfpbankCommand::default_instance_,
      ClearLfpbankCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearLfpbankCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearLfpbankCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearLfpbankCommand));
  MaximizeViewCommand_descriptor_ = file->message_type(8);
  static const int MaximizeViewCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaximizeViewCommand, viewname_),
  };
  MaximizeViewCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaximizeViewCommand_descriptor_,
      MaximizeViewCommand::default_instance_,
      MaximizeViewCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaximizeViewCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaximizeViewCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaximizeViewCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_arte_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArteCommand_descriptor_, &ArteCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetThresholdCommand_descriptor_, &SetThresholdCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPostsampsCommand_descriptor_, &SetPostsampsCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetClockCommand_descriptor_, &ResetClockCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskCommand_descriptor_, &DiskCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClockAndDiskCommand_descriptor_, &ClockAndDiskCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearProjectionsCommand_descriptor_, &ClearProjectionsCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearLfpbankCommand_descriptor_, &ClearLfpbankCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaximizeViewCommand_descriptor_, &MaximizeViewCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_arte_5fcommand_2eproto() {
  delete ArteCommand::default_instance_;
  delete ArteCommand_reflection_;
  delete SetThresholdCommand::default_instance_;
  delete SetThresholdCommand_reflection_;
  delete SetPostsampsCommand::default_instance_;
  delete SetPostsampsCommand_reflection_;
  delete ResetClockCommand::default_instance_;
  delete ResetClockCommand_reflection_;
  delete DiskCommand::default_instance_;
  delete DiskCommand_reflection_;
  delete ClockAndDiskCommand::default_instance_;
  delete ClockAndDiskCommand_reflection_;
  delete ClearProjectionsCommand::default_instance_;
  delete ClearProjectionsCommand_reflection_;
  delete ClearLfpbankCommand::default_instance_;
  delete ClearLfpbankCommand_reflection_;
  delete MaximizeViewCommand::default_instance_;
  delete MaximizeViewCommand_reflection_;
}

void protobuf_AddDesc_arte_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022arte_command.proto\"\374\003\n\013ArteCommand\022\021\n\t"
    "timestamp\030\001 \001(\004\022\021\n\tsource_id\030\002 \001(\005\022\026\n\016de"
    "stination_id\030\003 \001(\005\022\026\n\016message_string\030\004 \001"
    "(\t\0220\n\022set_thresh_command\030\n \001(\0132\024.SetThre"
    "sholdCommand\0223\n\025set_postsamps_command\030\013 "
    "\001(\0132\024.SetPostsampsCommand\022/\n\023reset_clock"
    "_command\030\014 \001(\0132\022.ResetClockCommand\022\"\n\014di"
    "sk_command\030\r \001(\0132\014.DiskCommand\0224\n\026clock_"
    "and_disk_command\030\016 \001(\0132\024.ClockAndDiskCom"
    "mand\022;\n\031clear_projections_command\030\017 \001(\0132"
    "\030.ClearProjectionsCommand\0223\n\025clear_lfpba"
    "nk_command\030\020 \001(\0132\024.ClearLfpbankCommand\0223"
    "\n\025maximize_view_command\030\021 \001(\0132\024.Maximize"
    "ViewCommand\"\331\001\n\023SetThresholdCommand\022\021\n\tt"
    "hreshold\030\001 \003(\002\022\021\n\ttrodename\030\002 \003(\005\022\017\n\007cha"
    "nind\030\003 \003(\005\022A\n\005units\030\004 \001(\0162#.SetThreshold"
    "Command.ThresholdUnits:\rBRAIN_VOLTAGE\"H\n"
    "\016ThresholdUnits\022\021\n\rBRAIN_VOLTAGE\020\000\022\025\n\021AM"
    "PLIFIED_VOLTAGE\020\001\022\014\n\010AD_UNITS\020\002\"\?\n\023SetPo"
    "stsampsCommand\022\025\n\tpostsamps\030\001 \001(\005:\00226\022\021\n"
    "\ttrodename\030\002 \003(\005\"\023\n\021ResetClockCommand\"d\n"
    "\013DiskCommand\022,\n\tnew_state\030\001 \001(\0162\025.DiskCo"
    "mmand.NewState:\002ON\"\'\n\010NewState\022\006\n\002ON\020\000\022\007"
    "\n\003OFF\020\001\022\n\n\006TOGGLE\020\002\"\025\n\023ClockAndDiskComma"
    "nd\",\n\027ClearProjectionsCommand\022\021\n\ttrodena"
    "me\030\001 \003(\005\"*\n\023ClearLfpbankCommand\022\023\n\013lfpba"
    "nkname\030\001 \003(\005\"*\n\023MaximizeViewCommand\022\023\n\010v"
    "iewname\030\001 \001(\005:\0010", 1096);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "arte_command.proto", &protobuf_RegisterTypes);
  ArteCommand::default_instance_ = new ArteCommand();
  SetThresholdCommand::default_instance_ = new SetThresholdCommand();
  SetPostsampsCommand::default_instance_ = new SetPostsampsCommand();
  ResetClockCommand::default_instance_ = new ResetClockCommand();
  DiskCommand::default_instance_ = new DiskCommand();
  ClockAndDiskCommand::default_instance_ = new ClockAndDiskCommand();
  ClearProjectionsCommand::default_instance_ = new ClearProjectionsCommand();
  ClearLfpbankCommand::default_instance_ = new ClearLfpbankCommand();
  MaximizeViewCommand::default_instance_ = new MaximizeViewCommand();
  ArteCommand::default_instance_->InitAsDefaultInstance();
  SetThresholdCommand::default_instance_->InitAsDefaultInstance();
  SetPostsampsCommand::default_instance_->InitAsDefaultInstance();
  ResetClockCommand::default_instance_->InitAsDefaultInstance();
  DiskCommand::default_instance_->InitAsDefaultInstance();
  ClockAndDiskCommand::default_instance_->InitAsDefaultInstance();
  ClearProjectionsCommand::default_instance_->InitAsDefaultInstance();
  ClearLfpbankCommand::default_instance_->InitAsDefaultInstance();
  MaximizeViewCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_arte_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_arte_5fcommand_2eproto {
  StaticDescriptorInitializer_arte_5fcommand_2eproto() {
    protobuf_AddDesc_arte_5fcommand_2eproto();
  }
} static_descriptor_initializer_arte_5fcommand_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ArteCommand::kTimestampFieldNumber;
const int ArteCommand::kSourceIdFieldNumber;
const int ArteCommand::kDestinationIdFieldNumber;
const int ArteCommand::kMessageStringFieldNumber;
const int ArteCommand::kSetThreshCommandFieldNumber;
const int ArteCommand::kSetPostsampsCommandFieldNumber;
const int ArteCommand::kResetClockCommandFieldNumber;
const int ArteCommand::kDiskCommandFieldNumber;
const int ArteCommand::kClockAndDiskCommandFieldNumber;
const int ArteCommand::kClearProjectionsCommandFieldNumber;
const int ArteCommand::kClearLfpbankCommandFieldNumber;
const int ArteCommand::kMaximizeViewCommandFieldNumber;
#endif  // !_MSC_VER

ArteCommand::ArteCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArteCommand::InitAsDefaultInstance() {
  set_thresh_command_ = const_cast< ::SetThresholdCommand*>(&::SetThresholdCommand::default_instance());
  set_postsamps_command_ = const_cast< ::SetPostsampsCommand*>(&::SetPostsampsCommand::default_instance());
  reset_clock_command_ = const_cast< ::ResetClockCommand*>(&::ResetClockCommand::default_instance());
  disk_command_ = const_cast< ::DiskCommand*>(&::DiskCommand::default_instance());
  clock_and_disk_command_ = const_cast< ::ClockAndDiskCommand*>(&::ClockAndDiskCommand::default_instance());
  clear_projections_command_ = const_cast< ::ClearProjectionsCommand*>(&::ClearProjectionsCommand::default_instance());
  clear_lfpbank_command_ = const_cast< ::ClearLfpbankCommand*>(&::ClearLfpbankCommand::default_instance());
  maximize_view_command_ = const_cast< ::MaximizeViewCommand*>(&::MaximizeViewCommand::default_instance());
}

ArteCommand::ArteCommand(const ArteCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArteCommand::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  source_id_ = 0;
  destination_id_ = 0;
  message_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  set_thresh_command_ = NULL;
  set_postsamps_command_ = NULL;
  reset_clock_command_ = NULL;
  disk_command_ = NULL;
  clock_and_disk_command_ = NULL;
  clear_projections_command_ = NULL;
  clear_lfpbank_command_ = NULL;
  maximize_view_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArteCommand::~ArteCommand() {
  SharedDtor();
}

void ArteCommand::SharedDtor() {
  if (message_string_ != &::google::protobuf::internal::kEmptyString) {
    delete message_string_;
  }
  if (this != default_instance_) {
    delete set_thresh_command_;
    delete set_postsamps_command_;
    delete reset_clock_command_;
    delete disk_command_;
    delete clock_and_disk_command_;
    delete clear_projections_command_;
    delete clear_lfpbank_command_;
    delete maximize_view_command_;
  }
}

void ArteCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArteCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArteCommand_descriptor_;
}

const ArteCommand& ArteCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

ArteCommand* ArteCommand::default_instance_ = NULL;

ArteCommand* ArteCommand::New() const {
  return new ArteCommand;
}

void ArteCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    source_id_ = 0;
    destination_id_ = 0;
    if (has_message_string()) {
      if (message_string_ != &::google::protobuf::internal::kEmptyString) {
        message_string_->clear();
      }
    }
    if (has_set_thresh_command()) {
      if (set_thresh_command_ != NULL) set_thresh_command_->::SetThresholdCommand::Clear();
    }
    if (has_set_postsamps_command()) {
      if (set_postsamps_command_ != NULL) set_postsamps_command_->::SetPostsampsCommand::Clear();
    }
    if (has_reset_clock_command()) {
      if (reset_clock_command_ != NULL) reset_clock_command_->::ResetClockCommand::Clear();
    }
    if (has_disk_command()) {
      if (disk_command_ != NULL) disk_command_->::DiskCommand::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_clock_and_disk_command()) {
      if (clock_and_disk_command_ != NULL) clock_and_disk_command_->::ClockAndDiskCommand::Clear();
    }
    if (has_clear_projections_command()) {
      if (clear_projections_command_ != NULL) clear_projections_command_->::ClearProjectionsCommand::Clear();
    }
    if (has_clear_lfpbank_command()) {
      if (clear_lfpbank_command_ != NULL) clear_lfpbank_command_->::ClearLfpbankCommand::Clear();
    }
    if (has_maximize_view_command()) {
      if (maximize_view_command_ != NULL) maximize_view_command_->::MaximizeViewCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArteCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_id;
        break;
      }
      
      // optional int32 source_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destination_id;
        break;
      }
      
      // optional int32 destination_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_id_)));
          set_has_destination_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message_string;
        break;
      }
      
      // optional string message_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_string().data(), this->message_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_set_thresh_command;
        break;
      }
      
      // optional .SetThresholdCommand set_thresh_command = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_thresh_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_thresh_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_set_postsamps_command;
        break;
      }
      
      // optional .SetPostsampsCommand set_postsamps_command = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_postsamps_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_postsamps_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_reset_clock_command;
        break;
      }
      
      // optional .ResetClockCommand reset_clock_command = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reset_clock_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reset_clock_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_disk_command;
        break;
      }
      
      // optional .DiskCommand disk_command = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disk_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_clock_and_disk_command;
        break;
      }
      
      // optional .ClockAndDiskCommand clock_and_disk_command = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clock_and_disk_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clock_and_disk_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_clear_projections_command;
        break;
      }
      
      // optional .ClearProjectionsCommand clear_projections_command = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clear_projections_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_projections_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_clear_lfpbank_command;
        break;
      }
      
      // optional .ClearLfpbankCommand clear_lfpbank_command = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clear_lfpbank_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_lfpbank_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_maximize_view_command;
        break;
      }
      
      // optional .MaximizeViewCommand maximize_view_command = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maximize_view_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maximize_view_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArteCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }
  
  // optional int32 source_id = 2;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source_id(), output);
  }
  
  // optional int32 destination_id = 3;
  if (has_destination_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->destination_id(), output);
  }
  
  // optional string message_string = 4;
  if (has_message_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_string().data(), this->message_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message_string(), output);
  }
  
  // optional .SetThresholdCommand set_thresh_command = 10;
  if (has_set_thresh_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->set_thresh_command(), output);
  }
  
  // optional .SetPostsampsCommand set_postsamps_command = 11;
  if (has_set_postsamps_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->set_postsamps_command(), output);
  }
  
  // optional .ResetClockCommand reset_clock_command = 12;
  if (has_reset_clock_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->reset_clock_command(), output);
  }
  
  // optional .DiskCommand disk_command = 13;
  if (has_disk_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->disk_command(), output);
  }
  
  // optional .ClockAndDiskCommand clock_and_disk_command = 14;
  if (has_clock_and_disk_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->clock_and_disk_command(), output);
  }
  
  // optional .ClearProjectionsCommand clear_projections_command = 15;
  if (has_clear_projections_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->clear_projections_command(), output);
  }
  
  // optional .ClearLfpbankCommand clear_lfpbank_command = 16;
  if (has_clear_lfpbank_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->clear_lfpbank_command(), output);
  }
  
  // optional .MaximizeViewCommand maximize_view_command = 17;
  if (has_maximize_view_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->maximize_view_command(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArteCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional int32 source_id = 2;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source_id(), target);
  }
  
  // optional int32 destination_id = 3;
  if (has_destination_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->destination_id(), target);
  }
  
  // optional string message_string = 4;
  if (has_message_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_string().data(), this->message_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message_string(), target);
  }
  
  // optional .SetThresholdCommand set_thresh_command = 10;
  if (has_set_thresh_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->set_thresh_command(), target);
  }
  
  // optional .SetPostsampsCommand set_postsamps_command = 11;
  if (has_set_postsamps_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->set_postsamps_command(), target);
  }
  
  // optional .ResetClockCommand reset_clock_command = 12;
  if (has_reset_clock_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->reset_clock_command(), target);
  }
  
  // optional .DiskCommand disk_command = 13;
  if (has_disk_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->disk_command(), target);
  }
  
  // optional .ClockAndDiskCommand clock_and_disk_command = 14;
  if (has_clock_and_disk_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->clock_and_disk_command(), target);
  }
  
  // optional .ClearProjectionsCommand clear_projections_command = 15;
  if (has_clear_projections_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->clear_projections_command(), target);
  }
  
  // optional .ClearLfpbankCommand clear_lfpbank_command = 16;
  if (has_clear_lfpbank_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->clear_lfpbank_command(), target);
  }
  
  // optional .MaximizeViewCommand maximize_view_command = 17;
  if (has_maximize_view_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->maximize_view_command(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArteCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional int32 source_id = 2;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_id());
    }
    
    // optional int32 destination_id = 3;
    if (has_destination_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destination_id());
    }
    
    // optional string message_string = 4;
    if (has_message_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_string());
    }
    
    // optional .SetThresholdCommand set_thresh_command = 10;
    if (has_set_thresh_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_thresh_command());
    }
    
    // optional .SetPostsampsCommand set_postsamps_command = 11;
    if (has_set_postsamps_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_postsamps_command());
    }
    
    // optional .ResetClockCommand reset_clock_command = 12;
    if (has_reset_clock_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reset_clock_command());
    }
    
    // optional .DiskCommand disk_command = 13;
    if (has_disk_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disk_command());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ClockAndDiskCommand clock_and_disk_command = 14;
    if (has_clock_and_disk_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clock_and_disk_command());
    }
    
    // optional .ClearProjectionsCommand clear_projections_command = 15;
    if (has_clear_projections_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clear_projections_command());
    }
    
    // optional .ClearLfpbankCommand clear_lfpbank_command = 16;
    if (has_clear_lfpbank_command()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clear_lfpbank_command());
    }
    
    // optional .MaximizeViewCommand maximize_view_command = 17;
    if (has_maximize_view_command()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maximize_view_command());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArteCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArteCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArteCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArteCommand::MergeFrom(const ArteCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_destination_id()) {
      set_destination_id(from.destination_id());
    }
    if (from.has_message_string()) {
      set_message_string(from.message_string());
    }
    if (from.has_set_thresh_command()) {
      mutable_set_thresh_command()->::SetThresholdCommand::MergeFrom(from.set_thresh_command());
    }
    if (from.has_set_postsamps_command()) {
      mutable_set_postsamps_command()->::SetPostsampsCommand::MergeFrom(from.set_postsamps_command());
    }
    if (from.has_reset_clock_command()) {
      mutable_reset_clock_command()->::ResetClockCommand::MergeFrom(from.reset_clock_command());
    }
    if (from.has_disk_command()) {
      mutable_disk_command()->::DiskCommand::MergeFrom(from.disk_command());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clock_and_disk_command()) {
      mutable_clock_and_disk_command()->::ClockAndDiskCommand::MergeFrom(from.clock_and_disk_command());
    }
    if (from.has_clear_projections_command()) {
      mutable_clear_projections_command()->::ClearProjectionsCommand::MergeFrom(from.clear_projections_command());
    }
    if (from.has_clear_lfpbank_command()) {
      mutable_clear_lfpbank_command()->::ClearLfpbankCommand::MergeFrom(from.clear_lfpbank_command());
    }
    if (from.has_maximize_view_command()) {
      mutable_maximize_view_command()->::MaximizeViewCommand::MergeFrom(from.maximize_view_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArteCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArteCommand::CopyFrom(const ArteCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArteCommand::IsInitialized() const {
  
  return true;
}

void ArteCommand::Swap(ArteCommand* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(source_id_, other->source_id_);
    std::swap(destination_id_, other->destination_id_);
    std::swap(message_string_, other->message_string_);
    std::swap(set_thresh_command_, other->set_thresh_command_);
    std::swap(set_postsamps_command_, other->set_postsamps_command_);
    std::swap(reset_clock_command_, other->reset_clock_command_);
    std::swap(disk_command_, other->disk_command_);
    std::swap(clock_and_disk_command_, other->clock_and_disk_command_);
    std::swap(clear_projections_command_, other->clear_projections_command_);
    std::swap(clear_lfpbank_command_, other->clear_lfpbank_command_);
    std::swap(maximize_view_command_, other->maximize_view_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArteCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArteCommand_descriptor_;
  metadata.reflection = ArteCommand_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SetThresholdCommand_ThresholdUnits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetThresholdCommand_ThresholdUnits_descriptor_;
}
bool SetThresholdCommand_ThresholdUnits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetThresholdCommand_ThresholdUnits SetThresholdCommand::BRAIN_VOLTAGE;
const SetThresholdCommand_ThresholdUnits SetThresholdCommand::AMPLIFIED_VOLTAGE;
const SetThresholdCommand_ThresholdUnits SetThresholdCommand::AD_UNITS;
const SetThresholdCommand_ThresholdUnits SetThresholdCommand::ThresholdUnits_MIN;
const SetThresholdCommand_ThresholdUnits SetThresholdCommand::ThresholdUnits_MAX;
const int SetThresholdCommand::ThresholdUnits_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SetThresholdCommand::kThresholdFieldNumber;
const int SetThresholdCommand::kTrodenameFieldNumber;
const int SetThresholdCommand::kChanindFieldNumber;
const int SetThresholdCommand::kUnitsFieldNumber;
#endif  // !_MSC_VER

SetThresholdCommand::SetThresholdCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetThresholdCommand::InitAsDefaultInstance() {
}

SetThresholdCommand::SetThresholdCommand(const SetThresholdCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetThresholdCommand::SharedCtor() {
  _cached_size_ = 0;
  units_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetThresholdCommand::~SetThresholdCommand() {
  SharedDtor();
}

void SetThresholdCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetThresholdCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetThresholdCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetThresholdCommand_descriptor_;
}

const SetThresholdCommand& SetThresholdCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

SetThresholdCommand* SetThresholdCommand::default_instance_ = NULL;

SetThresholdCommand* SetThresholdCommand::New() const {
  return new SetThresholdCommand;
}

void SetThresholdCommand::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    units_ = 0;
  }
  threshold_.Clear();
  trodename_.Clear();
  chanind_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetThresholdCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float threshold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_threshold())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_threshold())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_threshold;
        if (input->ExpectTag(16)) goto parse_trodename;
        break;
      }
      
      // repeated int32 trodename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trodename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_trodename())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trodename())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trodename;
        if (input->ExpectTag(24)) goto parse_chanind;
        break;
      }
      
      // repeated int32 chanind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chanind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_chanind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chanind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chanind;
        if (input->ExpectTag(32)) goto parse_units;
        break;
      }
      
      // optional .SetThresholdCommand.ThresholdUnits units = 4 [default = BRAIN_VOLTAGE];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SetThresholdCommand_ThresholdUnits_IsValid(value)) {
            set_units(static_cast< ::SetThresholdCommand_ThresholdUnits >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetThresholdCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float threshold = 1;
  for (int i = 0; i < this->threshold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->threshold(i), output);
  }
  
  // repeated int32 trodename = 2;
  for (int i = 0; i < this->trodename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->trodename(i), output);
  }
  
  // repeated int32 chanind = 3;
  for (int i = 0; i < this->chanind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->chanind(i), output);
  }
  
  // optional .SetThresholdCommand.ThresholdUnits units = 4 [default = BRAIN_VOLTAGE];
  if (has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->units(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetThresholdCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float threshold = 1;
  for (int i = 0; i < this->threshold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->threshold(i), target);
  }
  
  // repeated int32 trodename = 2;
  for (int i = 0; i < this->trodename_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->trodename(i), target);
  }
  
  // repeated int32 chanind = 3;
  for (int i = 0; i < this->chanind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->chanind(i), target);
  }
  
  // optional .SetThresholdCommand.ThresholdUnits units = 4 [default = BRAIN_VOLTAGE];
  if (has_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->units(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetThresholdCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .SetThresholdCommand.ThresholdUnits units = 4 [default = BRAIN_VOLTAGE];
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->units());
    }
    
  }
  // repeated float threshold = 1;
  {
    int data_size = 0;
    data_size = 4 * this->threshold_size();
    total_size += 1 * this->threshold_size() + data_size;
  }
  
  // repeated int32 trodename = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->trodename_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trodename(i));
    }
    total_size += 1 * this->trodename_size() + data_size;
  }
  
  // repeated int32 chanind = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->chanind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chanind(i));
    }
    total_size += 1 * this->chanind_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetThresholdCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetThresholdCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetThresholdCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetThresholdCommand::MergeFrom(const SetThresholdCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  threshold_.MergeFrom(from.threshold_);
  trodename_.MergeFrom(from.trodename_);
  chanind_.MergeFrom(from.chanind_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_units()) {
      set_units(from.units());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetThresholdCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetThresholdCommand::CopyFrom(const SetThresholdCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetThresholdCommand::IsInitialized() const {
  
  return true;
}

void SetThresholdCommand::Swap(SetThresholdCommand* other) {
  if (other != this) {
    threshold_.Swap(&other->threshold_);
    trodename_.Swap(&other->trodename_);
    chanind_.Swap(&other->chanind_);
    std::swap(units_, other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetThresholdCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetThresholdCommand_descriptor_;
  metadata.reflection = SetThresholdCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPostsampsCommand::kPostsampsFieldNumber;
const int SetPostsampsCommand::kTrodenameFieldNumber;
#endif  // !_MSC_VER

SetPostsampsCommand::SetPostsampsCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPostsampsCommand::InitAsDefaultInstance() {
}

SetPostsampsCommand::SetPostsampsCommand(const SetPostsampsCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPostsampsCommand::SharedCtor() {
  _cached_size_ = 0;
  postsamps_ = 26;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPostsampsCommand::~SetPostsampsCommand() {
  SharedDtor();
}

void SetPostsampsCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPostsampsCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPostsampsCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPostsampsCommand_descriptor_;
}

const SetPostsampsCommand& SetPostsampsCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

SetPostsampsCommand* SetPostsampsCommand::default_instance_ = NULL;

SetPostsampsCommand* SetPostsampsCommand::New() const {
  return new SetPostsampsCommand;
}

void SetPostsampsCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    postsamps_ = 26;
  }
  trodename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPostsampsCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 postsamps = 1 [default = 26];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &postsamps_)));
          set_has_postsamps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trodename;
        break;
      }
      
      // repeated int32 trodename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trodename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_trodename())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trodename())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trodename;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPostsampsCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 postsamps = 1 [default = 26];
  if (has_postsamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->postsamps(), output);
  }
  
  // repeated int32 trodename = 2;
  for (int i = 0; i < this->trodename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->trodename(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPostsampsCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 postsamps = 1 [default = 26];
  if (has_postsamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->postsamps(), target);
  }
  
  // repeated int32 trodename = 2;
  for (int i = 0; i < this->trodename_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->trodename(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPostsampsCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 postsamps = 1 [default = 26];
    if (has_postsamps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->postsamps());
    }
    
  }
  // repeated int32 trodename = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->trodename_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trodename(i));
    }
    total_size += 1 * this->trodename_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPostsampsCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPostsampsCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPostsampsCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPostsampsCommand::MergeFrom(const SetPostsampsCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  trodename_.MergeFrom(from.trodename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_postsamps()) {
      set_postsamps(from.postsamps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPostsampsCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPostsampsCommand::CopyFrom(const SetPostsampsCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPostsampsCommand::IsInitialized() const {
  
  return true;
}

void SetPostsampsCommand::Swap(SetPostsampsCommand* other) {
  if (other != this) {
    std::swap(postsamps_, other->postsamps_);
    trodename_.Swap(&other->trodename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPostsampsCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPostsampsCommand_descriptor_;
  metadata.reflection = SetPostsampsCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetClockCommand::ResetClockCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetClockCommand::InitAsDefaultInstance() {
}

ResetClockCommand::ResetClockCommand(const ResetClockCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetClockCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetClockCommand::~ResetClockCommand() {
  SharedDtor();
}

void ResetClockCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetClockCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetClockCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetClockCommand_descriptor_;
}

const ResetClockCommand& ResetClockCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

ResetClockCommand* ResetClockCommand::default_instance_ = NULL;

ResetClockCommand* ResetClockCommand::New() const {
  return new ResetClockCommand;
}

void ResetClockCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetClockCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ResetClockCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetClockCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetClockCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetClockCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetClockCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetClockCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetClockCommand::MergeFrom(const ResetClockCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetClockCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetClockCommand::CopyFrom(const ResetClockCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetClockCommand::IsInitialized() const {
  
  return true;
}

void ResetClockCommand::Swap(ResetClockCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetClockCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetClockCommand_descriptor_;
  metadata.reflection = ResetClockCommand_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DiskCommand_NewState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskCommand_NewState_descriptor_;
}
bool DiskCommand_NewState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DiskCommand_NewState DiskCommand::ON;
const DiskCommand_NewState DiskCommand::OFF;
const DiskCommand_NewState DiskCommand::TOGGLE;
const DiskCommand_NewState DiskCommand::NewState_MIN;
const DiskCommand_NewState DiskCommand::NewState_MAX;
const int DiskCommand::NewState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DiskCommand::kNewStateFieldNumber;
#endif  // !_MSC_VER

DiskCommand::DiskCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiskCommand::InitAsDefaultInstance() {
}

DiskCommand::DiskCommand(const DiskCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiskCommand::SharedCtor() {
  _cached_size_ = 0;
  new_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskCommand::~DiskCommand() {
  SharedDtor();
}

void DiskCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiskCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskCommand_descriptor_;
}

const DiskCommand& DiskCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

DiskCommand* DiskCommand::default_instance_ = NULL;

DiskCommand* DiskCommand::New() const {
  return new DiskCommand;
}

void DiskCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DiskCommand.NewState new_state = 1 [default = ON];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DiskCommand_NewState_IsValid(value)) {
            set_new_state(static_cast< ::DiskCommand_NewState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiskCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DiskCommand.NewState new_state = 1 [default = ON];
  if (has_new_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->new_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiskCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DiskCommand.NewState new_state = 1 [default = ON];
  if (has_new_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->new_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiskCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DiskCommand.NewState new_state = 1 [default = ON];
    if (has_new_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskCommand::MergeFrom(const DiskCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_state()) {
      set_new_state(from.new_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskCommand::CopyFrom(const DiskCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskCommand::IsInitialized() const {
  
  return true;
}

void DiskCommand::Swap(DiskCommand* other) {
  if (other != this) {
    std::swap(new_state_, other->new_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskCommand_descriptor_;
  metadata.reflection = DiskCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClockAndDiskCommand::ClockAndDiskCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClockAndDiskCommand::InitAsDefaultInstance() {
}

ClockAndDiskCommand::ClockAndDiskCommand(const ClockAndDiskCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClockAndDiskCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClockAndDiskCommand::~ClockAndDiskCommand() {
  SharedDtor();
}

void ClockAndDiskCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClockAndDiskCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClockAndDiskCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClockAndDiskCommand_descriptor_;
}

const ClockAndDiskCommand& ClockAndDiskCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

ClockAndDiskCommand* ClockAndDiskCommand::default_instance_ = NULL;

ClockAndDiskCommand* ClockAndDiskCommand::New() const {
  return new ClockAndDiskCommand;
}

void ClockAndDiskCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClockAndDiskCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClockAndDiskCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClockAndDiskCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClockAndDiskCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClockAndDiskCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClockAndDiskCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClockAndDiskCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClockAndDiskCommand::MergeFrom(const ClockAndDiskCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClockAndDiskCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClockAndDiskCommand::CopyFrom(const ClockAndDiskCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClockAndDiskCommand::IsInitialized() const {
  
  return true;
}

void ClockAndDiskCommand::Swap(ClockAndDiskCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClockAndDiskCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClockAndDiskCommand_descriptor_;
  metadata.reflection = ClockAndDiskCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearProjectionsCommand::kTrodenameFieldNumber;
#endif  // !_MSC_VER

ClearProjectionsCommand::ClearProjectionsCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearProjectionsCommand::InitAsDefaultInstance() {
}

ClearProjectionsCommand::ClearProjectionsCommand(const ClearProjectionsCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearProjectionsCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearProjectionsCommand::~ClearProjectionsCommand() {
  SharedDtor();
}

void ClearProjectionsCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearProjectionsCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearProjectionsCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearProjectionsCommand_descriptor_;
}

const ClearProjectionsCommand& ClearProjectionsCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

ClearProjectionsCommand* ClearProjectionsCommand::default_instance_ = NULL;

ClearProjectionsCommand* ClearProjectionsCommand::New() const {
  return new ClearProjectionsCommand;
}

void ClearProjectionsCommand::Clear() {
  trodename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearProjectionsCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 trodename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trodename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_trodename())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trodename())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_trodename;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClearProjectionsCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 trodename = 1;
  for (int i = 0; i < this->trodename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->trodename(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearProjectionsCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 trodename = 1;
  for (int i = 0; i < this->trodename_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->trodename(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearProjectionsCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 trodename = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->trodename_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trodename(i));
    }
    total_size += 1 * this->trodename_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearProjectionsCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearProjectionsCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearProjectionsCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearProjectionsCommand::MergeFrom(const ClearProjectionsCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  trodename_.MergeFrom(from.trodename_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearProjectionsCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearProjectionsCommand::CopyFrom(const ClearProjectionsCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearProjectionsCommand::IsInitialized() const {
  
  return true;
}

void ClearProjectionsCommand::Swap(ClearProjectionsCommand* other) {
  if (other != this) {
    trodename_.Swap(&other->trodename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearProjectionsCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearProjectionsCommand_descriptor_;
  metadata.reflection = ClearProjectionsCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearLfpbankCommand::kLfpbanknameFieldNumber;
#endif  // !_MSC_VER

ClearLfpbankCommand::ClearLfpbankCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearLfpbankCommand::InitAsDefaultInstance() {
}

ClearLfpbankCommand::ClearLfpbankCommand(const ClearLfpbankCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearLfpbankCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearLfpbankCommand::~ClearLfpbankCommand() {
  SharedDtor();
}

void ClearLfpbankCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearLfpbankCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearLfpbankCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearLfpbankCommand_descriptor_;
}

const ClearLfpbankCommand& ClearLfpbankCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

ClearLfpbankCommand* ClearLfpbankCommand::default_instance_ = NULL;

ClearLfpbankCommand* ClearLfpbankCommand::New() const {
  return new ClearLfpbankCommand;
}

void ClearLfpbankCommand::Clear() {
  lfpbankname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearLfpbankCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 lfpbankname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lfpbankname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_lfpbankname())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lfpbankname())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_lfpbankname;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClearLfpbankCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 lfpbankname = 1;
  for (int i = 0; i < this->lfpbankname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->lfpbankname(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearLfpbankCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 lfpbankname = 1;
  for (int i = 0; i < this->lfpbankname_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->lfpbankname(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearLfpbankCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 lfpbankname = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->lfpbankname_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lfpbankname(i));
    }
    total_size += 1 * this->lfpbankname_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearLfpbankCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearLfpbankCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearLfpbankCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearLfpbankCommand::MergeFrom(const ClearLfpbankCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  lfpbankname_.MergeFrom(from.lfpbankname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearLfpbankCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearLfpbankCommand::CopyFrom(const ClearLfpbankCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearLfpbankCommand::IsInitialized() const {
  
  return true;
}

void ClearLfpbankCommand::Swap(ClearLfpbankCommand* other) {
  if (other != this) {
    lfpbankname_.Swap(&other->lfpbankname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearLfpbankCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearLfpbankCommand_descriptor_;
  metadata.reflection = ClearLfpbankCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaximizeViewCommand::kViewnameFieldNumber;
#endif  // !_MSC_VER

MaximizeViewCommand::MaximizeViewCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaximizeViewCommand::InitAsDefaultInstance() {
}

MaximizeViewCommand::MaximizeViewCommand(const MaximizeViewCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaximizeViewCommand::SharedCtor() {
  _cached_size_ = 0;
  viewname_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaximizeViewCommand::~MaximizeViewCommand() {
  SharedDtor();
}

void MaximizeViewCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaximizeViewCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaximizeViewCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaximizeViewCommand_descriptor_;
}

const MaximizeViewCommand& MaximizeViewCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fcommand_2eproto();  return *default_instance_;
}

MaximizeViewCommand* MaximizeViewCommand::default_instance_ = NULL;

MaximizeViewCommand* MaximizeViewCommand::New() const {
  return new MaximizeViewCommand;
}

void MaximizeViewCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viewname_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaximizeViewCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 viewname = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewname_)));
          set_has_viewname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaximizeViewCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 viewname = 1 [default = 0];
  if (has_viewname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viewname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaximizeViewCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 viewname = 1 [default = 0];
  if (has_viewname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viewname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaximizeViewCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 viewname = 1 [default = 0];
    if (has_viewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaximizeViewCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaximizeViewCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaximizeViewCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaximizeViewCommand::MergeFrom(const MaximizeViewCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewname()) {
      set_viewname(from.viewname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaximizeViewCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaximizeViewCommand::CopyFrom(const MaximizeViewCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaximizeViewCommand::IsInitialized() const {
  
  return true;
}

void MaximizeViewCommand::Swap(MaximizeViewCommand* other) {
  if (other != this) {
    std::swap(viewname_, other->viewname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaximizeViewCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaximizeViewCommand_descriptor_;
  metadata.reflection = MaximizeViewCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
