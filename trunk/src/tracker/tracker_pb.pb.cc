// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracker_pb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* OrthoConv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrthoConv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Affine2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Affine2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjMat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjMat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraOpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraOpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraGroup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraGroup_CombineStyle_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Led_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Led_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackerOpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerOpt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_5fpb_2eproto() {
  protobuf_AddDesc_tracker_5fpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker_pb.proto");
  GOOGLE_CHECK(file != NULL);
  OrthoConv_descriptor_ = file->message_type(0);
  static const int OrthoConv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoConv, x_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoConv, x_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoConv, y_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoConv, y_max_),
  };
  OrthoConv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrthoConv_descriptor_,
      OrthoConv::default_instance_,
      OrthoConv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoConv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoConv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrthoConv));
  Affine2D_descriptor_ = file->message_type(1);
  static const int Affine2D_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Affine2D, coef_),
  };
  Affine2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Affine2D_descriptor_,
      Affine2D::default_instance_,
      Affine2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Affine2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Affine2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Affine2D));
  ProjMat_descriptor_ = file->message_type(2);
  static const int ProjMat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMat, coef_),
  };
  ProjMat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjMat_descriptor_,
      ProjMat::default_instance_,
      ProjMat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjMat));
  CameraOpt_descriptor_ = file->message_type(3);
  static const int CameraOpt_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, input_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, output_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, ortho_conv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, affine_2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, proj_mat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, led_blur1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, led_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, led_blur2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, body_blur1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, body_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, body_blur2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, led_diameter_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, background_subtract_),
  };
  CameraOpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraOpt_descriptor_,
      CameraOpt::default_instance_,
      CameraOpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraOpt));
  CameraGroup_descriptor_ = file->message_type(4);
  static const int CameraGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGroup, cam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGroup, combine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGroup, label_),
  };
  CameraGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraGroup_descriptor_,
      CameraGroup::default_instance_,
      CameraGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraGroup));
  CameraGroup_CombineStyle_descriptor_ = CameraGroup_descriptor_->enum_type(0);
  Led_descriptor_ = file->message_type(5);
  static const int Led_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Led, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Led, y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Led, z_pos_),
  };
  Led_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Led_descriptor_,
      Led::default_instance_,
      Led_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Led, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Led, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Led));
  TrackerOpt_descriptor_ = file->message_type(6);
  static const int TrackerOpt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerOpt, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerOpt, max_n_cams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerOpt, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerOpt, n_led_),
  };
  TrackerOpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackerOpt_descriptor_,
      TrackerOpt::default_instance_,
      TrackerOpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerOpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerOpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackerOpt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_5fpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrthoConv_descriptor_, &OrthoConv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Affine2D_descriptor_, &Affine2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjMat_descriptor_, &ProjMat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraOpt_descriptor_, &CameraOpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraGroup_descriptor_, &CameraGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Led_descriptor_, &Led::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackerOpt_descriptor_, &TrackerOpt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_5fpb_2eproto() {
  delete OrthoConv::default_instance_;
  delete OrthoConv_reflection_;
  delete Affine2D::default_instance_;
  delete Affine2D_reflection_;
  delete ProjMat::default_instance_;
  delete ProjMat_reflection_;
  delete CameraOpt::default_instance_;
  delete CameraOpt_reflection_;
  delete CameraGroup::default_instance_;
  delete CameraGroup_reflection_;
  delete Led::default_instance_;
  delete Led_reflection_;
  delete TrackerOpt::default_instance_;
  delete TrackerOpt_reflection_;
}

void protobuf_AddDesc_tracker_5fpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020tracker_pb.proto\"G\n\tOrthoConv\022\r\n\005x_min"
    "\030\001 \001(\002\022\r\n\005x_max\030\002 \001(\002\022\r\n\005y_min\030\003 \001(\002\022\r\n\005"
    "y_max\030\004 \001(\002\"\030\n\010Affine2D\022\014\n\004coef\030\001 \003(\002\"\027\n"
    "\007ProjMat\022\014\n\004coef\030\001 \003(\002\"\356\002\n\tCameraOpt\022\n\n\002"
    "id\030\001 \001(\005\022\025\n\rserial_number\030\002 \001(\005\022\027\n\017input"
    "_file_name\030\003 \001(\t\022\030\n\020output_file_name\030\004 \001"
    "(\t\022\036\n\northo_conv\030\005 \001(\0132\n.OrthoConv\022\034\n\taf"
    "fine_2d\030\006 \001(\0132\t.Affine2D\022\032\n\010proj_mat\030\007 \001"
    "(\0132\010.ProjMat\022\021\n\tled_blur1\030\010 \001(\005\022\025\n\rled_t"
    "hreshold\030\t \001(\002\022\021\n\tled_blur2\030\n \001(\005\022\022\n\nbod"
    "y_blur1\030\013 \001(\005\022\026\n\016body_threshold\030\014 \001(\002\022\022\n"
    "\nbody_blur2\030\r \001(\005\022\027\n\017led_diameter_px\030\016 \001"
    "(\005\022\033\n\023background_subtract\030\017 \001(\010\"\227\001\n\013Came"
    "raGroup\022\027\n\003cam\030\001 \003(\0132\n.CameraOpt\022*\n\007comb"
    "ine\030\002 \001(\0162\031.CameraGroup.CombineStyle\022\r\n\005"
    "label\030\003 \001(\t\"4\n\014CombineStyle\022\010\n\004NONE\020\001\022\016\n"
    "\nPANOSTITCH\020\002\022\n\n\006FULL3D\020\003\"2\n\003Led\022\r\n\005x_po"
    "s\030\001 \001(\002\022\r\n\005y_pos\030\002 \001(\002\022\r\n\005z_pos\030\003 \001(\002\"[\n"
    "\nTrackerOpt\022\033\n\005group\030\001 \003(\0132\014.CameraGroup"
    "\022\022\n\nmax_n_cams\030\002 \001(\005\022\r\n\005timer\030\003 \001(\t\022\r\n\005n"
    "_led\030\004 \001(\005", 810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker_pb.proto", &protobuf_RegisterTypes);
  OrthoConv::default_instance_ = new OrthoConv();
  Affine2D::default_instance_ = new Affine2D();
  ProjMat::default_instance_ = new ProjMat();
  CameraOpt::default_instance_ = new CameraOpt();
  CameraGroup::default_instance_ = new CameraGroup();
  Led::default_instance_ = new Led();
  TrackerOpt::default_instance_ = new TrackerOpt();
  OrthoConv::default_instance_->InitAsDefaultInstance();
  Affine2D::default_instance_->InitAsDefaultInstance();
  ProjMat::default_instance_->InitAsDefaultInstance();
  CameraOpt::default_instance_->InitAsDefaultInstance();
  CameraGroup::default_instance_->InitAsDefaultInstance();
  Led::default_instance_->InitAsDefaultInstance();
  TrackerOpt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_5fpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_5fpb_2eproto {
  StaticDescriptorInitializer_tracker_5fpb_2eproto() {
    protobuf_AddDesc_tracker_5fpb_2eproto();
  }
} static_descriptor_initializer_tracker_5fpb_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int OrthoConv::kXMinFieldNumber;
const int OrthoConv::kXMaxFieldNumber;
const int OrthoConv::kYMinFieldNumber;
const int OrthoConv::kYMaxFieldNumber;
#endif  // !_MSC_VER

OrthoConv::OrthoConv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrthoConv::InitAsDefaultInstance() {
}

OrthoConv::OrthoConv(const OrthoConv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrthoConv::SharedCtor() {
  _cached_size_ = 0;
  x_min_ = 0;
  x_max_ = 0;
  y_min_ = 0;
  y_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrthoConv::~OrthoConv() {
  SharedDtor();
}

void OrthoConv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrthoConv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrthoConv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrthoConv_descriptor_;
}

const OrthoConv& OrthoConv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fpb_2eproto();  return *default_instance_;
}

OrthoConv* OrthoConv::default_instance_ = NULL;

OrthoConv* OrthoConv::New() const {
  return new OrthoConv;
}

void OrthoConv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_min_ = 0;
    x_max_ = 0;
    y_min_ = 0;
    y_max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrthoConv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_min = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_min_)));
          set_has_x_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x_max;
        break;
      }
      
      // optional float x_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_max_)));
          set_has_x_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y_min;
        break;
      }
      
      // optional float y_min = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_min_)));
          set_has_y_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y_max;
        break;
      }
      
      // optional float y_max = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_max_)));
          set_has_y_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrthoConv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x_min = 1;
  if (has_x_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_min(), output);
  }
  
  // optional float x_max = 2;
  if (has_x_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x_max(), output);
  }
  
  // optional float y_min = 3;
  if (has_y_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y_min(), output);
  }
  
  // optional float y_max = 4;
  if (has_y_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_max(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrthoConv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x_min = 1;
  if (has_x_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_min(), target);
  }
  
  // optional float x_max = 2;
  if (has_x_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x_max(), target);
  }
  
  // optional float y_min = 3;
  if (has_y_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y_min(), target);
  }
  
  // optional float y_max = 4;
  if (has_y_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y_max(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrthoConv::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x_min = 1;
    if (has_x_min()) {
      total_size += 1 + 4;
    }
    
    // optional float x_max = 2;
    if (has_x_max()) {
      total_size += 1 + 4;
    }
    
    // optional float y_min = 3;
    if (has_y_min()) {
      total_size += 1 + 4;
    }
    
    // optional float y_max = 4;
    if (has_y_max()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrthoConv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrthoConv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrthoConv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrthoConv::MergeFrom(const OrthoConv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_min()) {
      set_x_min(from.x_min());
    }
    if (from.has_x_max()) {
      set_x_max(from.x_max());
    }
    if (from.has_y_min()) {
      set_y_min(from.y_min());
    }
    if (from.has_y_max()) {
      set_y_max(from.y_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrthoConv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrthoConv::CopyFrom(const OrthoConv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrthoConv::IsInitialized() const {
  
  return true;
}

void OrthoConv::Swap(OrthoConv* other) {
  if (other != this) {
    std::swap(x_min_, other->x_min_);
    std::swap(x_max_, other->x_max_);
    std::swap(y_min_, other->y_min_);
    std::swap(y_max_, other->y_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrthoConv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrthoConv_descriptor_;
  metadata.reflection = OrthoConv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Affine2D::kCoefFieldNumber;
#endif  // !_MSC_VER

Affine2D::Affine2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Affine2D::InitAsDefaultInstance() {
}

Affine2D::Affine2D(const Affine2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Affine2D::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Affine2D::~Affine2D() {
  SharedDtor();
}

void Affine2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Affine2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Affine2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Affine2D_descriptor_;
}

const Affine2D& Affine2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fpb_2eproto();  return *default_instance_;
}

Affine2D* Affine2D::default_instance_ = NULL;

Affine2D* Affine2D::New() const {
  return new Affine2D;
}

void Affine2D::Clear() {
  coef_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Affine2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float coef = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_coef())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coef())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_coef;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Affine2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float coef = 1;
  for (int i = 0; i < this->coef_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->coef(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Affine2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float coef = 1;
  for (int i = 0; i < this->coef_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->coef(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Affine2D::ByteSize() const {
  int total_size = 0;
  
  // repeated float coef = 1;
  {
    int data_size = 0;
    data_size = 4 * this->coef_size();
    total_size += 1 * this->coef_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Affine2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Affine2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Affine2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Affine2D::MergeFrom(const Affine2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  coef_.MergeFrom(from.coef_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Affine2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Affine2D::CopyFrom(const Affine2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Affine2D::IsInitialized() const {
  
  return true;
}

void Affine2D::Swap(Affine2D* other) {
  if (other != this) {
    coef_.Swap(&other->coef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Affine2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Affine2D_descriptor_;
  metadata.reflection = Affine2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjMat::kCoefFieldNumber;
#endif  // !_MSC_VER

ProjMat::ProjMat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProjMat::InitAsDefaultInstance() {
}

ProjMat::ProjMat(const ProjMat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProjMat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjMat::~ProjMat() {
  SharedDtor();
}

void ProjMat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProjMat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjMat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjMat_descriptor_;
}

const ProjMat& ProjMat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fpb_2eproto();  return *default_instance_;
}

ProjMat* ProjMat::default_instance_ = NULL;

ProjMat* ProjMat::New() const {
  return new ProjMat;
}

void ProjMat::Clear() {
  coef_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjMat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float coef = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_coef())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coef())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_coef;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProjMat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float coef = 1;
  for (int i = 0; i < this->coef_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->coef(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProjMat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float coef = 1;
  for (int i = 0; i < this->coef_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->coef(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProjMat::ByteSize() const {
  int total_size = 0;
  
  // repeated float coef = 1;
  {
    int data_size = 0;
    data_size = 4 * this->coef_size();
    total_size += 1 * this->coef_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjMat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjMat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjMat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjMat::MergeFrom(const ProjMat& from) {
  GOOGLE_CHECK_NE(&from, this);
  coef_.MergeFrom(from.coef_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjMat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjMat::CopyFrom(const ProjMat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjMat::IsInitialized() const {
  
  return true;
}

void ProjMat::Swap(ProjMat* other) {
  if (other != this) {
    coef_.Swap(&other->coef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjMat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjMat_descriptor_;
  metadata.reflection = ProjMat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraOpt::kIdFieldNumber;
const int CameraOpt::kSerialNumberFieldNumber;
const int CameraOpt::kInputFileNameFieldNumber;
const int CameraOpt::kOutputFileNameFieldNumber;
const int CameraOpt::kOrthoConvFieldNumber;
const int CameraOpt::kAffine2DFieldNumber;
const int CameraOpt::kProjMatFieldNumber;
const int CameraOpt::kLedBlur1FieldNumber;
const int CameraOpt::kLedThresholdFieldNumber;
const int CameraOpt::kLedBlur2FieldNumber;
const int CameraOpt::kBodyBlur1FieldNumber;
const int CameraOpt::kBodyThresholdFieldNumber;
const int CameraOpt::kBodyBlur2FieldNumber;
const int CameraOpt::kLedDiameterPxFieldNumber;
const int CameraOpt::kBackgroundSubtractFieldNumber;
#endif  // !_MSC_VER

CameraOpt::CameraOpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraOpt::InitAsDefaultInstance() {
  ortho_conv_ = const_cast< ::OrthoConv*>(&::OrthoConv::default_instance());
  affine_2d_ = const_cast< ::Affine2D*>(&::Affine2D::default_instance());
  proj_mat_ = const_cast< ::ProjMat*>(&::ProjMat::default_instance());
}

CameraOpt::CameraOpt(const CameraOpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraOpt::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  serial_number_ = 0;
  input_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  output_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ortho_conv_ = NULL;
  affine_2d_ = NULL;
  proj_mat_ = NULL;
  led_blur1_ = 0;
  led_threshold_ = 0;
  led_blur2_ = 0;
  body_blur1_ = 0;
  body_threshold_ = 0;
  body_blur2_ = 0;
  led_diameter_px_ = 0;
  background_subtract_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraOpt::~CameraOpt() {
  SharedDtor();
}

void CameraOpt::SharedDtor() {
  if (input_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete input_file_name_;
  }
  if (output_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete output_file_name_;
  }
  if (this != default_instance_) {
    delete ortho_conv_;
    delete affine_2d_;
    delete proj_mat_;
  }
}

void CameraOpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraOpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraOpt_descriptor_;
}

const CameraOpt& CameraOpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fpb_2eproto();  return *default_instance_;
}

CameraOpt* CameraOpt::default_instance_ = NULL;

CameraOpt* CameraOpt::New() const {
  return new CameraOpt;
}

void CameraOpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    serial_number_ = 0;
    if (has_input_file_name()) {
      if (input_file_name_ != &::google::protobuf::internal::kEmptyString) {
        input_file_name_->clear();
      }
    }
    if (has_output_file_name()) {
      if (output_file_name_ != &::google::protobuf::internal::kEmptyString) {
        output_file_name_->clear();
      }
    }
    if (has_ortho_conv()) {
      if (ortho_conv_ != NULL) ortho_conv_->::OrthoConv::Clear();
    }
    if (has_affine_2d()) {
      if (affine_2d_ != NULL) affine_2d_->::Affine2D::Clear();
    }
    if (has_proj_mat()) {
      if (proj_mat_ != NULL) proj_mat_->::ProjMat::Clear();
    }
    led_blur1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    led_threshold_ = 0;
    led_blur2_ = 0;
    body_blur1_ = 0;
    body_threshold_ = 0;
    body_blur2_ = 0;
    led_diameter_px_ = 0;
    background_subtract_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraOpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serial_number;
        break;
      }
      
      // optional int32 serial_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input_file_name;
        break;
      }
      
      // optional string input_file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_file_name().data(), this->input_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_output_file_name;
        break;
      }
      
      // optional string output_file_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output_file_name().data(), this->output_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ortho_conv;
        break;
      }
      
      // optional .OrthoConv ortho_conv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ortho_conv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ortho_conv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_affine_2d;
        break;
      }
      
      // optional .Affine2D affine_2d = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_affine_2d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_affine_2d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_proj_mat;
        break;
      }
      
      // optional .ProjMat proj_mat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proj_mat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proj_mat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_led_blur1;
        break;
      }
      
      // optional int32 led_blur1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_led_blur1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &led_blur1_)));
          set_has_led_blur1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_led_threshold;
        break;
      }
      
      // optional float led_threshold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_led_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &led_threshold_)));
          set_has_led_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_led_blur2;
        break;
      }
      
      // optional int32 led_blur2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_led_blur2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &led_blur2_)));
          set_has_led_blur2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_body_blur1;
        break;
      }
      
      // optional int32 body_blur1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_blur1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_blur1_)));
          set_has_body_blur1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_body_threshold;
        break;
      }
      
      // optional float body_threshold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_body_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &body_threshold_)));
          set_has_body_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_body_blur2;
        break;
      }
      
      // optional int32 body_blur2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_blur2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_blur2_)));
          set_has_body_blur2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_led_diameter_px;
        break;
      }
      
      // optional int32 led_diameter_px = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_led_diameter_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &led_diameter_px_)));
          set_has_led_diameter_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_background_subtract;
        break;
      }
      
      // optional bool background_subtract = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_subtract:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &background_subtract_)));
          set_has_background_subtract();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraOpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 serial_number = 2;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serial_number(), output);
  }
  
  // optional string input_file_name = 3;
  if (has_input_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_file_name().data(), this->input_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input_file_name(), output);
  }
  
  // optional string output_file_name = 4;
  if (has_output_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_file_name().data(), this->output_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->output_file_name(), output);
  }
  
  // optional .OrthoConv ortho_conv = 5;
  if (has_ortho_conv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ortho_conv(), output);
  }
  
  // optional .Affine2D affine_2d = 6;
  if (has_affine_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->affine_2d(), output);
  }
  
  // optional .ProjMat proj_mat = 7;
  if (has_proj_mat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->proj_mat(), output);
  }
  
  // optional int32 led_blur1 = 8;
  if (has_led_blur1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->led_blur1(), output);
  }
  
  // optional float led_threshold = 9;
  if (has_led_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->led_threshold(), output);
  }
  
  // optional int32 led_blur2 = 10;
  if (has_led_blur2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->led_blur2(), output);
  }
  
  // optional int32 body_blur1 = 11;
  if (has_body_blur1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->body_blur1(), output);
  }
  
  // optional float body_threshold = 12;
  if (has_body_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->body_threshold(), output);
  }
  
  // optional int32 body_blur2 = 13;
  if (has_body_blur2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->body_blur2(), output);
  }
  
  // optional int32 led_diameter_px = 14;
  if (has_led_diameter_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->led_diameter_px(), output);
  }
  
  // optional bool background_subtract = 15;
  if (has_background_subtract()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->background_subtract(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraOpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 serial_number = 2;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serial_number(), target);
  }
  
  // optional string input_file_name = 3;
  if (has_input_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_file_name().data(), this->input_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_file_name(), target);
  }
  
  // optional string output_file_name = 4;
  if (has_output_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_file_name().data(), this->output_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->output_file_name(), target);
  }
  
  // optional .OrthoConv ortho_conv = 5;
  if (has_ortho_conv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ortho_conv(), target);
  }
  
  // optional .Affine2D affine_2d = 6;
  if (has_affine_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->affine_2d(), target);
  }
  
  // optional .ProjMat proj_mat = 7;
  if (has_proj_mat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->proj_mat(), target);
  }
  
  // optional int32 led_blur1 = 8;
  if (has_led_blur1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->led_blur1(), target);
  }
  
  // optional float led_threshold = 9;
  if (has_led_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->led_threshold(), target);
  }
  
  // optional int32 led_blur2 = 10;
  if (has_led_blur2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->led_blur2(), target);
  }
  
  // optional int32 body_blur1 = 11;
  if (has_body_blur1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->body_blur1(), target);
  }
  
  // optional float body_threshold = 12;
  if (has_body_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->body_threshold(), target);
  }
  
  // optional int32 body_blur2 = 13;
  if (has_body_blur2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->body_blur2(), target);
  }
  
  // optional int32 led_diameter_px = 14;
  if (has_led_diameter_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->led_diameter_px(), target);
  }
  
  // optional bool background_subtract = 15;
  if (has_background_subtract()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->background_subtract(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraOpt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 serial_number = 2;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_number());
    }
    
    // optional string input_file_name = 3;
    if (has_input_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_file_name());
    }
    
    // optional string output_file_name = 4;
    if (has_output_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_file_name());
    }
    
    // optional .OrthoConv ortho_conv = 5;
    if (has_ortho_conv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ortho_conv());
    }
    
    // optional .Affine2D affine_2d = 6;
    if (has_affine_2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->affine_2d());
    }
    
    // optional .ProjMat proj_mat = 7;
    if (has_proj_mat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proj_mat());
    }
    
    // optional int32 led_blur1 = 8;
    if (has_led_blur1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->led_blur1());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float led_threshold = 9;
    if (has_led_threshold()) {
      total_size += 1 + 4;
    }
    
    // optional int32 led_blur2 = 10;
    if (has_led_blur2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->led_blur2());
    }
    
    // optional int32 body_blur1 = 11;
    if (has_body_blur1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body_blur1());
    }
    
    // optional float body_threshold = 12;
    if (has_body_threshold()) {
      total_size += 1 + 4;
    }
    
    // optional int32 body_blur2 = 13;
    if (has_body_blur2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body_blur2());
    }
    
    // optional int32 led_diameter_px = 14;
    if (has_led_diameter_px()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->led_diameter_px());
    }
    
    // optional bool background_subtract = 15;
    if (has_background_subtract()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraOpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraOpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraOpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraOpt::MergeFrom(const CameraOpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_input_file_name()) {
      set_input_file_name(from.input_file_name());
    }
    if (from.has_output_file_name()) {
      set_output_file_name(from.output_file_name());
    }
    if (from.has_ortho_conv()) {
      mutable_ortho_conv()->::OrthoConv::MergeFrom(from.ortho_conv());
    }
    if (from.has_affine_2d()) {
      mutable_affine_2d()->::Affine2D::MergeFrom(from.affine_2d());
    }
    if (from.has_proj_mat()) {
      mutable_proj_mat()->::ProjMat::MergeFrom(from.proj_mat());
    }
    if (from.has_led_blur1()) {
      set_led_blur1(from.led_blur1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_led_threshold()) {
      set_led_threshold(from.led_threshold());
    }
    if (from.has_led_blur2()) {
      set_led_blur2(from.led_blur2());
    }
    if (from.has_body_blur1()) {
      set_body_blur1(from.body_blur1());
    }
    if (from.has_body_threshold()) {
      set_body_threshold(from.body_threshold());
    }
    if (from.has_body_blur2()) {
      set_body_blur2(from.body_blur2());
    }
    if (from.has_led_diameter_px()) {
      set_led_diameter_px(from.led_diameter_px());
    }
    if (from.has_background_subtract()) {
      set_background_subtract(from.background_subtract());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraOpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraOpt::CopyFrom(const CameraOpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraOpt::IsInitialized() const {
  
  return true;
}

void CameraOpt::Swap(CameraOpt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(input_file_name_, other->input_file_name_);
    std::swap(output_file_name_, other->output_file_name_);
    std::swap(ortho_conv_, other->ortho_conv_);
    std::swap(affine_2d_, other->affine_2d_);
    std::swap(proj_mat_, other->proj_mat_);
    std::swap(led_blur1_, other->led_blur1_);
    std::swap(led_threshold_, other->led_threshold_);
    std::swap(led_blur2_, other->led_blur2_);
    std::swap(body_blur1_, other->body_blur1_);
    std::swap(body_threshold_, other->body_threshold_);
    std::swap(body_blur2_, other->body_blur2_);
    std::swap(led_diameter_px_, other->led_diameter_px_);
    std::swap(background_subtract_, other->background_subtract_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraOpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraOpt_descriptor_;
  metadata.reflection = CameraOpt_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CameraGroup_CombineStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraGroup_CombineStyle_descriptor_;
}
bool CameraGroup_CombineStyle_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CameraGroup_CombineStyle CameraGroup::NONE;
const CameraGroup_CombineStyle CameraGroup::PANOSTITCH;
const CameraGroup_CombineStyle CameraGroup::FULL3D;
const CameraGroup_CombineStyle CameraGroup::CombineStyle_MIN;
const CameraGroup_CombineStyle CameraGroup::CombineStyle_MAX;
const int CameraGroup::CombineStyle_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CameraGroup::kCamFieldNumber;
const int CameraGroup::kCombineFieldNumber;
const int CameraGroup::kLabelFieldNumber;
#endif  // !_MSC_VER

CameraGroup::CameraGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraGroup::InitAsDefaultInstance() {
}

CameraGroup::CameraGroup(const CameraGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraGroup::SharedCtor() {
  _cached_size_ = 0;
  combine_ = 1;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraGroup::~CameraGroup() {
  SharedDtor();
}

void CameraGroup::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void CameraGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraGroup_descriptor_;
}

const CameraGroup& CameraGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fpb_2eproto();  return *default_instance_;
}

CameraGroup* CameraGroup::default_instance_ = NULL;

CameraGroup* CameraGroup::New() const {
  return new CameraGroup;
}

void CameraGroup::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    combine_ = 1;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  cam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CameraOpt cam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cam;
        if (input->ExpectTag(16)) goto parse_combine;
        break;
      }
      
      // optional .CameraGroup.CombineStyle combine = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CameraGroup_CombineStyle_IsValid(value)) {
            set_combine(static_cast< ::CameraGroup_CombineStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_label;
        break;
      }
      
      // optional string label = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CameraOpt cam = 1;
  for (int i = 0; i < this->cam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cam(i), output);
  }
  
  // optional .CameraGroup.CombineStyle combine = 2;
  if (has_combine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->combine(), output);
  }
  
  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->label(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CameraOpt cam = 1;
  for (int i = 0; i < this->cam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cam(i), target);
  }
  
  // optional .CameraGroup.CombineStyle combine = 2;
  if (has_combine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->combine(), target);
  }
  
  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .CameraGroup.CombineStyle combine = 2;
    if (has_combine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->combine());
    }
    
    // optional string label = 3;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  // repeated .CameraOpt cam = 1;
  total_size += 1 * this->cam_size();
  for (int i = 0; i < this->cam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cam(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraGroup::MergeFrom(const CameraGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  cam_.MergeFrom(from.cam_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_combine()) {
      set_combine(from.combine());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraGroup::CopyFrom(const CameraGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraGroup::IsInitialized() const {
  
  return true;
}

void CameraGroup::Swap(CameraGroup* other) {
  if (other != this) {
    cam_.Swap(&other->cam_);
    std::swap(combine_, other->combine_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraGroup_descriptor_;
  metadata.reflection = CameraGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Led::kXPosFieldNumber;
const int Led::kYPosFieldNumber;
const int Led::kZPosFieldNumber;
#endif  // !_MSC_VER

Led::Led()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Led::InitAsDefaultInstance() {
}

Led::Led(const Led& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Led::SharedCtor() {
  _cached_size_ = 0;
  x_pos_ = 0;
  y_pos_ = 0;
  z_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Led::~Led() {
  SharedDtor();
}

void Led::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Led::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Led::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Led_descriptor_;
}

const Led& Led::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fpb_2eproto();  return *default_instance_;
}

Led* Led::default_instance_ = NULL;

Led* Led::New() const {
  return new Led;
}

void Led::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_pos_ = 0;
    y_pos_ = 0;
    z_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Led::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y_pos;
        break;
      }
      
      // optional float y_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z_pos;
        break;
      }
      
      // optional float z_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_pos_)));
          set_has_z_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Led::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x_pos = 1;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_pos(), output);
  }
  
  // optional float y_pos = 2;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_pos(), output);
  }
  
  // optional float z_pos = 3;
  if (has_z_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Led::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x_pos = 1;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_pos(), target);
  }
  
  // optional float y_pos = 2;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_pos(), target);
  }
  
  // optional float z_pos = 3;
  if (has_z_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Led::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x_pos = 1;
    if (has_x_pos()) {
      total_size += 1 + 4;
    }
    
    // optional float y_pos = 2;
    if (has_y_pos()) {
      total_size += 1 + 4;
    }
    
    // optional float z_pos = 3;
    if (has_z_pos()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Led::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Led* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Led*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Led::MergeFrom(const Led& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
    if (from.has_z_pos()) {
      set_z_pos(from.z_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Led::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Led::CopyFrom(const Led& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Led::IsInitialized() const {
  
  return true;
}

void Led::Swap(Led* other) {
  if (other != this) {
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(z_pos_, other->z_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Led::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Led_descriptor_;
  metadata.reflection = Led_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackerOpt::kGroupFieldNumber;
const int TrackerOpt::kMaxNCamsFieldNumber;
const int TrackerOpt::kTimerFieldNumber;
const int TrackerOpt::kNLedFieldNumber;
#endif  // !_MSC_VER

TrackerOpt::TrackerOpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackerOpt::InitAsDefaultInstance() {
}

TrackerOpt::TrackerOpt(const TrackerOpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackerOpt::SharedCtor() {
  _cached_size_ = 0;
  max_n_cams_ = 0;
  timer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  n_led_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerOpt::~TrackerOpt() {
  SharedDtor();
}

void TrackerOpt::SharedDtor() {
  if (timer_ != &::google::protobuf::internal::kEmptyString) {
    delete timer_;
  }
  if (this != default_instance_) {
  }
}

void TrackerOpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerOpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerOpt_descriptor_;
}

const TrackerOpt& TrackerOpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fpb_2eproto();  return *default_instance_;
}

TrackerOpt* TrackerOpt::default_instance_ = NULL;

TrackerOpt* TrackerOpt::New() const {
  return new TrackerOpt;
}

void TrackerOpt::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    max_n_cams_ = 0;
    if (has_timer()) {
      if (timer_ != &::google::protobuf::internal::kEmptyString) {
        timer_->clear();
      }
    }
    n_led_ = 0;
  }
  group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackerOpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CameraGroup group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_group;
        if (input->ExpectTag(16)) goto parse_max_n_cams;
        break;
      }
      
      // optional int32 max_n_cams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_n_cams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_n_cams_)));
          set_has_max_n_cams();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timer;
        break;
      }
      
      // optional string timer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timer().data(), this->timer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_n_led;
        break;
      }
      
      // optional int32 n_led = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n_led:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_led_)));
          set_has_n_led();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackerOpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CameraGroup group = 1;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group(i), output);
  }
  
  // optional int32 max_n_cams = 2;
  if (has_max_n_cams()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_n_cams(), output);
  }
  
  // optional string timer = 3;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timer().data(), this->timer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timer(), output);
  }
  
  // optional int32 n_led = 4;
  if (has_n_led()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->n_led(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackerOpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CameraGroup group = 1;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group(i), target);
  }
  
  // optional int32 max_n_cams = 2;
  if (has_max_n_cams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_n_cams(), target);
  }
  
  // optional string timer = 3;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timer().data(), this->timer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timer(), target);
  }
  
  // optional int32 n_led = 4;
  if (has_n_led()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->n_led(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackerOpt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 max_n_cams = 2;
    if (has_max_n_cams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_n_cams());
    }
    
    // optional string timer = 3;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timer());
    }
    
    // optional int32 n_led = 4;
    if (has_n_led()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_led());
    }
    
  }
  // repeated .CameraGroup group = 1;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerOpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackerOpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackerOpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackerOpt::MergeFrom(const TrackerOpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_.MergeFrom(from.group_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_max_n_cams()) {
      set_max_n_cams(from.max_n_cams());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
    if (from.has_n_led()) {
      set_n_led(from.n_led());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackerOpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerOpt::CopyFrom(const TrackerOpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerOpt::IsInitialized() const {
  
  return true;
}

void TrackerOpt::Swap(TrackerOpt* other) {
  if (other != this) {
    group_.Swap(&other->group_);
    std::swap(max_n_cams_, other->max_n_cams_);
    std::swap(timer_, other->timer_);
    std::swap(n_led_, other->n_led_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackerOpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerOpt_descriptor_;
  metadata.reflection = TrackerOpt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
