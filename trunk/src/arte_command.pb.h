// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arte_command.proto

#ifndef PROTOBUF_arte_5fcommand_2eproto__INCLUDED
#define PROTOBUF_arte_5fcommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_arte_5fcommand_2eproto();
void protobuf_AssignDesc_arte_5fcommand_2eproto();
void protobuf_ShutdownFile_arte_5fcommand_2eproto();

class ArteCommand;
class SetThresholdCommand;
class SetPostsampsCommand;
class ResetClockCommand;
class DiskCommand;
class ClockAndDiskCommand;
class ClearProjectionsCommand;
class ClearLfpbankCommand;
class MaximizeViewCommand;

enum SetThresholdCommand_ThresholdUnits {
  SetThresholdCommand_ThresholdUnits_BRAIN_VOLTAGE = 0,
  SetThresholdCommand_ThresholdUnits_AMPLIFIED_VOLTAGE = 1,
  SetThresholdCommand_ThresholdUnits_AD_UNITS = 2
};
bool SetThresholdCommand_ThresholdUnits_IsValid(int value);
const SetThresholdCommand_ThresholdUnits SetThresholdCommand_ThresholdUnits_ThresholdUnits_MIN = SetThresholdCommand_ThresholdUnits_BRAIN_VOLTAGE;
const SetThresholdCommand_ThresholdUnits SetThresholdCommand_ThresholdUnits_ThresholdUnits_MAX = SetThresholdCommand_ThresholdUnits_AD_UNITS;
const int SetThresholdCommand_ThresholdUnits_ThresholdUnits_ARRAYSIZE = SetThresholdCommand_ThresholdUnits_ThresholdUnits_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetThresholdCommand_ThresholdUnits_descriptor();
inline const ::std::string& SetThresholdCommand_ThresholdUnits_Name(SetThresholdCommand_ThresholdUnits value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetThresholdCommand_ThresholdUnits_descriptor(), value);
}
inline bool SetThresholdCommand_ThresholdUnits_Parse(
    const ::std::string& name, SetThresholdCommand_ThresholdUnits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetThresholdCommand_ThresholdUnits>(
    SetThresholdCommand_ThresholdUnits_descriptor(), name, value);
}
enum DiskCommand_NewState {
  DiskCommand_NewState_ON = 0,
  DiskCommand_NewState_OFF = 1,
  DiskCommand_NewState_TOGGLE = 2
};
bool DiskCommand_NewState_IsValid(int value);
const DiskCommand_NewState DiskCommand_NewState_NewState_MIN = DiskCommand_NewState_ON;
const DiskCommand_NewState DiskCommand_NewState_NewState_MAX = DiskCommand_NewState_TOGGLE;
const int DiskCommand_NewState_NewState_ARRAYSIZE = DiskCommand_NewState_NewState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DiskCommand_NewState_descriptor();
inline const ::std::string& DiskCommand_NewState_Name(DiskCommand_NewState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DiskCommand_NewState_descriptor(), value);
}
inline bool DiskCommand_NewState_Parse(
    const ::std::string& name, DiskCommand_NewState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DiskCommand_NewState>(
    DiskCommand_NewState_descriptor(), name, value);
}
// ===================================================================

class ArteCommand : public ::google::protobuf::Message {
 public:
  ArteCommand();
  virtual ~ArteCommand();
  
  ArteCommand(const ArteCommand& from);
  
  inline ArteCommand& operator=(const ArteCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArteCommand& default_instance();
  
  void Swap(ArteCommand* other);
  
  // implements Message ----------------------------------------------
  
  ArteCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArteCommand& from);
  void MergeFrom(const ArteCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // optional int32 source_id = 2;
  inline bool has_source_id() const;
  inline void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  inline ::google::protobuf::int32 source_id() const;
  inline void set_source_id(::google::protobuf::int32 value);
  
  // optional int32 destination_id = 3;
  inline bool has_destination_id() const;
  inline void clear_destination_id();
  static const int kDestinationIdFieldNumber = 3;
  inline ::google::protobuf::int32 destination_id() const;
  inline void set_destination_id(::google::protobuf::int32 value);
  
  // optional string message_string = 4;
  inline bool has_message_string() const;
  inline void clear_message_string();
  static const int kMessageStringFieldNumber = 4;
  inline const ::std::string& message_string() const;
  inline void set_message_string(const ::std::string& value);
  inline void set_message_string(const char* value);
  inline void set_message_string(const char* value, size_t size);
  inline ::std::string* mutable_message_string();
  inline ::std::string* release_message_string();
  
  // optional .SetThresholdCommand set_thresh_command = 10;
  inline bool has_set_thresh_command() const;
  inline void clear_set_thresh_command();
  static const int kSetThreshCommandFieldNumber = 10;
  inline const ::SetThresholdCommand& set_thresh_command() const;
  inline ::SetThresholdCommand* mutable_set_thresh_command();
  inline ::SetThresholdCommand* release_set_thresh_command();
  
  // optional .SetPostsampsCommand set_postsamps_command = 11;
  inline bool has_set_postsamps_command() const;
  inline void clear_set_postsamps_command();
  static const int kSetPostsampsCommandFieldNumber = 11;
  inline const ::SetPostsampsCommand& set_postsamps_command() const;
  inline ::SetPostsampsCommand* mutable_set_postsamps_command();
  inline ::SetPostsampsCommand* release_set_postsamps_command();
  
  // optional .ResetClockCommand reset_clock_command = 12;
  inline bool has_reset_clock_command() const;
  inline void clear_reset_clock_command();
  static const int kResetClockCommandFieldNumber = 12;
  inline const ::ResetClockCommand& reset_clock_command() const;
  inline ::ResetClockCommand* mutable_reset_clock_command();
  inline ::ResetClockCommand* release_reset_clock_command();
  
  // optional .DiskCommand disk_command = 13;
  inline bool has_disk_command() const;
  inline void clear_disk_command();
  static const int kDiskCommandFieldNumber = 13;
  inline const ::DiskCommand& disk_command() const;
  inline ::DiskCommand* mutable_disk_command();
  inline ::DiskCommand* release_disk_command();
  
  // optional .ClockAndDiskCommand clock_and_disk_command = 14;
  inline bool has_clock_and_disk_command() const;
  inline void clear_clock_and_disk_command();
  static const int kClockAndDiskCommandFieldNumber = 14;
  inline const ::ClockAndDiskCommand& clock_and_disk_command() const;
  inline ::ClockAndDiskCommand* mutable_clock_and_disk_command();
  inline ::ClockAndDiskCommand* release_clock_and_disk_command();
  
  // optional .ClearProjectionsCommand clear_projections_command = 15;
  inline bool has_clear_projections_command() const;
  inline void clear_clear_projections_command();
  static const int kClearProjectionsCommandFieldNumber = 15;
  inline const ::ClearProjectionsCommand& clear_projections_command() const;
  inline ::ClearProjectionsCommand* mutable_clear_projections_command();
  inline ::ClearProjectionsCommand* release_clear_projections_command();
  
  // optional .ClearLfpbankCommand clear_lfpbank_command = 16;
  inline bool has_clear_lfpbank_command() const;
  inline void clear_clear_lfpbank_command();
  static const int kClearLfpbankCommandFieldNumber = 16;
  inline const ::ClearLfpbankCommand& clear_lfpbank_command() const;
  inline ::ClearLfpbankCommand* mutable_clear_lfpbank_command();
  inline ::ClearLfpbankCommand* release_clear_lfpbank_command();
  
  // optional .MaximizeViewCommand maximize_view_command = 17;
  inline bool has_maximize_view_command() const;
  inline void clear_maximize_view_command();
  static const int kMaximizeViewCommandFieldNumber = 17;
  inline const ::MaximizeViewCommand& maximize_view_command() const;
  inline ::MaximizeViewCommand* mutable_maximize_view_command();
  inline ::MaximizeViewCommand* release_maximize_view_command();
  
  // @@protoc_insertion_point(class_scope:ArteCommand)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_source_id();
  inline void clear_has_source_id();
  inline void set_has_destination_id();
  inline void clear_has_destination_id();
  inline void set_has_message_string();
  inline void clear_has_message_string();
  inline void set_has_set_thresh_command();
  inline void clear_has_set_thresh_command();
  inline void set_has_set_postsamps_command();
  inline void clear_has_set_postsamps_command();
  inline void set_has_reset_clock_command();
  inline void clear_has_reset_clock_command();
  inline void set_has_disk_command();
  inline void clear_has_disk_command();
  inline void set_has_clock_and_disk_command();
  inline void clear_has_clock_and_disk_command();
  inline void set_has_clear_projections_command();
  inline void clear_has_clear_projections_command();
  inline void set_has_clear_lfpbank_command();
  inline void clear_has_clear_lfpbank_command();
  inline void set_has_maximize_view_command();
  inline void clear_has_maximize_view_command();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int32 source_id_;
  ::google::protobuf::int32 destination_id_;
  ::std::string* message_string_;
  ::SetThresholdCommand* set_thresh_command_;
  ::SetPostsampsCommand* set_postsamps_command_;
  ::ResetClockCommand* reset_clock_command_;
  ::DiskCommand* disk_command_;
  ::ClockAndDiskCommand* clock_and_disk_command_;
  ::ClearProjectionsCommand* clear_projections_command_;
  ::ClearLfpbankCommand* clear_lfpbank_command_;
  ::MaximizeViewCommand* maximize_view_command_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static ArteCommand* default_instance_;
};
// -------------------------------------------------------------------

class SetThresholdCommand : public ::google::protobuf::Message {
 public:
  SetThresholdCommand();
  virtual ~SetThresholdCommand();
  
  SetThresholdCommand(const SetThresholdCommand& from);
  
  inline SetThresholdCommand& operator=(const SetThresholdCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetThresholdCommand& default_instance();
  
  void Swap(SetThresholdCommand* other);
  
  // implements Message ----------------------------------------------
  
  SetThresholdCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetThresholdCommand& from);
  void MergeFrom(const SetThresholdCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SetThresholdCommand_ThresholdUnits ThresholdUnits;
  static const ThresholdUnits BRAIN_VOLTAGE = SetThresholdCommand_ThresholdUnits_BRAIN_VOLTAGE;
  static const ThresholdUnits AMPLIFIED_VOLTAGE = SetThresholdCommand_ThresholdUnits_AMPLIFIED_VOLTAGE;
  static const ThresholdUnits AD_UNITS = SetThresholdCommand_ThresholdUnits_AD_UNITS;
  static inline bool ThresholdUnits_IsValid(int value) {
    return SetThresholdCommand_ThresholdUnits_IsValid(value);
  }
  static const ThresholdUnits ThresholdUnits_MIN =
    SetThresholdCommand_ThresholdUnits_ThresholdUnits_MIN;
  static const ThresholdUnits ThresholdUnits_MAX =
    SetThresholdCommand_ThresholdUnits_ThresholdUnits_MAX;
  static const int ThresholdUnits_ARRAYSIZE =
    SetThresholdCommand_ThresholdUnits_ThresholdUnits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ThresholdUnits_descriptor() {
    return SetThresholdCommand_ThresholdUnits_descriptor();
  }
  static inline const ::std::string& ThresholdUnits_Name(ThresholdUnits value) {
    return SetThresholdCommand_ThresholdUnits_Name(value);
  }
  static inline bool ThresholdUnits_Parse(const ::std::string& name,
      ThresholdUnits* value) {
    return SetThresholdCommand_ThresholdUnits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated float threshold = 1;
  inline int threshold_size() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  inline float threshold(int index) const;
  inline void set_threshold(int index, float value);
  inline void add_threshold(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      threshold() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_threshold();
  
  // repeated int32 trodename = 2;
  inline int trodename_size() const;
  inline void clear_trodename();
  static const int kTrodenameFieldNumber = 2;
  inline ::google::protobuf::int32 trodename(int index) const;
  inline void set_trodename(int index, ::google::protobuf::int32 value);
  inline void add_trodename(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trodename() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trodename();
  
  // repeated int32 chanind = 3;
  inline int chanind_size() const;
  inline void clear_chanind();
  static const int kChanindFieldNumber = 3;
  inline ::google::protobuf::int32 chanind(int index) const;
  inline void set_chanind(int index, ::google::protobuf::int32 value);
  inline void add_chanind(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chanind() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chanind();
  
  // optional .SetThresholdCommand.ThresholdUnits units = 4 [default = BRAIN_VOLTAGE];
  inline bool has_units() const;
  inline void clear_units();
  static const int kUnitsFieldNumber = 4;
  inline ::SetThresholdCommand_ThresholdUnits units() const;
  inline void set_units(::SetThresholdCommand_ThresholdUnits value);
  
  // @@protoc_insertion_point(class_scope:SetThresholdCommand)
 private:
  inline void set_has_units();
  inline void clear_has_units();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< float > threshold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trodename_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chanind_;
  int units_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static SetThresholdCommand* default_instance_;
};
// -------------------------------------------------------------------

class SetPostsampsCommand : public ::google::protobuf::Message {
 public:
  SetPostsampsCommand();
  virtual ~SetPostsampsCommand();
  
  SetPostsampsCommand(const SetPostsampsCommand& from);
  
  inline SetPostsampsCommand& operator=(const SetPostsampsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPostsampsCommand& default_instance();
  
  void Swap(SetPostsampsCommand* other);
  
  // implements Message ----------------------------------------------
  
  SetPostsampsCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetPostsampsCommand& from);
  void MergeFrom(const SetPostsampsCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 postsamps = 1 [default = 26];
  inline bool has_postsamps() const;
  inline void clear_postsamps();
  static const int kPostsampsFieldNumber = 1;
  inline ::google::protobuf::int32 postsamps() const;
  inline void set_postsamps(::google::protobuf::int32 value);
  
  // repeated int32 trodename = 2;
  inline int trodename_size() const;
  inline void clear_trodename();
  static const int kTrodenameFieldNumber = 2;
  inline ::google::protobuf::int32 trodename(int index) const;
  inline void set_trodename(int index, ::google::protobuf::int32 value);
  inline void add_trodename(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trodename() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trodename();
  
  // @@protoc_insertion_point(class_scope:SetPostsampsCommand)
 private:
  inline void set_has_postsamps();
  inline void clear_has_postsamps();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trodename_;
  ::google::protobuf::int32 postsamps_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static SetPostsampsCommand* default_instance_;
};
// -------------------------------------------------------------------

class ResetClockCommand : public ::google::protobuf::Message {
 public:
  ResetClockCommand();
  virtual ~ResetClockCommand();
  
  ResetClockCommand(const ResetClockCommand& from);
  
  inline ResetClockCommand& operator=(const ResetClockCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetClockCommand& default_instance();
  
  void Swap(ResetClockCommand* other);
  
  // implements Message ----------------------------------------------
  
  ResetClockCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResetClockCommand& from);
  void MergeFrom(const ResetClockCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ResetClockCommand)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static ResetClockCommand* default_instance_;
};
// -------------------------------------------------------------------

class DiskCommand : public ::google::protobuf::Message {
 public:
  DiskCommand();
  virtual ~DiskCommand();
  
  DiskCommand(const DiskCommand& from);
  
  inline DiskCommand& operator=(const DiskCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskCommand& default_instance();
  
  void Swap(DiskCommand* other);
  
  // implements Message ----------------------------------------------
  
  DiskCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiskCommand& from);
  void MergeFrom(const DiskCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DiskCommand_NewState NewState;
  static const NewState ON = DiskCommand_NewState_ON;
  static const NewState OFF = DiskCommand_NewState_OFF;
  static const NewState TOGGLE = DiskCommand_NewState_TOGGLE;
  static inline bool NewState_IsValid(int value) {
    return DiskCommand_NewState_IsValid(value);
  }
  static const NewState NewState_MIN =
    DiskCommand_NewState_NewState_MIN;
  static const NewState NewState_MAX =
    DiskCommand_NewState_NewState_MAX;
  static const int NewState_ARRAYSIZE =
    DiskCommand_NewState_NewState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NewState_descriptor() {
    return DiskCommand_NewState_descriptor();
  }
  static inline const ::std::string& NewState_Name(NewState value) {
    return DiskCommand_NewState_Name(value);
  }
  static inline bool NewState_Parse(const ::std::string& name,
      NewState* value) {
    return DiskCommand_NewState_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .DiskCommand.NewState new_state = 1 [default = ON];
  inline bool has_new_state() const;
  inline void clear_new_state();
  static const int kNewStateFieldNumber = 1;
  inline ::DiskCommand_NewState new_state() const;
  inline void set_new_state(::DiskCommand_NewState value);
  
  // @@protoc_insertion_point(class_scope:DiskCommand)
 private:
  inline void set_has_new_state();
  inline void clear_has_new_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int new_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static DiskCommand* default_instance_;
};
// -------------------------------------------------------------------

class ClockAndDiskCommand : public ::google::protobuf::Message {
 public:
  ClockAndDiskCommand();
  virtual ~ClockAndDiskCommand();
  
  ClockAndDiskCommand(const ClockAndDiskCommand& from);
  
  inline ClockAndDiskCommand& operator=(const ClockAndDiskCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClockAndDiskCommand& default_instance();
  
  void Swap(ClockAndDiskCommand* other);
  
  // implements Message ----------------------------------------------
  
  ClockAndDiskCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClockAndDiskCommand& from);
  void MergeFrom(const ClockAndDiskCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ClockAndDiskCommand)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static ClockAndDiskCommand* default_instance_;
};
// -------------------------------------------------------------------

class ClearProjectionsCommand : public ::google::protobuf::Message {
 public:
  ClearProjectionsCommand();
  virtual ~ClearProjectionsCommand();
  
  ClearProjectionsCommand(const ClearProjectionsCommand& from);
  
  inline ClearProjectionsCommand& operator=(const ClearProjectionsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearProjectionsCommand& default_instance();
  
  void Swap(ClearProjectionsCommand* other);
  
  // implements Message ----------------------------------------------
  
  ClearProjectionsCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearProjectionsCommand& from);
  void MergeFrom(const ClearProjectionsCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 trodename = 1;
  inline int trodename_size() const;
  inline void clear_trodename();
  static const int kTrodenameFieldNumber = 1;
  inline ::google::protobuf::int32 trodename(int index) const;
  inline void set_trodename(int index, ::google::protobuf::int32 value);
  inline void add_trodename(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trodename() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trodename();
  
  // @@protoc_insertion_point(class_scope:ClearProjectionsCommand)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trodename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static ClearProjectionsCommand* default_instance_;
};
// -------------------------------------------------------------------

class ClearLfpbankCommand : public ::google::protobuf::Message {
 public:
  ClearLfpbankCommand();
  virtual ~ClearLfpbankCommand();
  
  ClearLfpbankCommand(const ClearLfpbankCommand& from);
  
  inline ClearLfpbankCommand& operator=(const ClearLfpbankCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearLfpbankCommand& default_instance();
  
  void Swap(ClearLfpbankCommand* other);
  
  // implements Message ----------------------------------------------
  
  ClearLfpbankCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearLfpbankCommand& from);
  void MergeFrom(const ClearLfpbankCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 lfpbankname = 1;
  inline int lfpbankname_size() const;
  inline void clear_lfpbankname();
  static const int kLfpbanknameFieldNumber = 1;
  inline ::google::protobuf::int32 lfpbankname(int index) const;
  inline void set_lfpbankname(int index, ::google::protobuf::int32 value);
  inline void add_lfpbankname(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lfpbankname() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lfpbankname();
  
  // @@protoc_insertion_point(class_scope:ClearLfpbankCommand)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lfpbankname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static ClearLfpbankCommand* default_instance_;
};
// -------------------------------------------------------------------

class MaximizeViewCommand : public ::google::protobuf::Message {
 public:
  MaximizeViewCommand();
  virtual ~MaximizeViewCommand();
  
  MaximizeViewCommand(const MaximizeViewCommand& from);
  
  inline MaximizeViewCommand& operator=(const MaximizeViewCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaximizeViewCommand& default_instance();
  
  void Swap(MaximizeViewCommand* other);
  
  // implements Message ----------------------------------------------
  
  MaximizeViewCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaximizeViewCommand& from);
  void MergeFrom(const MaximizeViewCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 viewname = 1 [default = 0];
  inline bool has_viewname() const;
  inline void clear_viewname();
  static const int kViewnameFieldNumber = 1;
  inline ::google::protobuf::int32 viewname() const;
  inline void set_viewname(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:MaximizeViewCommand)
 private:
  inline void set_has_viewname();
  inline void clear_has_viewname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 viewname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fcommand_2eproto();
  friend void protobuf_AssignDesc_arte_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_arte_5fcommand_2eproto();
  
  void InitAsDefaultInstance();
  static MaximizeViewCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// ArteCommand

// optional uint64 timestamp = 1;
inline bool ArteCommand::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArteCommand::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArteCommand::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArteCommand::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ArteCommand::timestamp() const {
  return timestamp_;
}
inline void ArteCommand::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 source_id = 2;
inline bool ArteCommand::has_source_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArteCommand::set_has_source_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArteCommand::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArteCommand::clear_source_id() {
  source_id_ = 0;
  clear_has_source_id();
}
inline ::google::protobuf::int32 ArteCommand::source_id() const {
  return source_id_;
}
inline void ArteCommand::set_source_id(::google::protobuf::int32 value) {
  set_has_source_id();
  source_id_ = value;
}

// optional int32 destination_id = 3;
inline bool ArteCommand::has_destination_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArteCommand::set_has_destination_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArteCommand::clear_has_destination_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArteCommand::clear_destination_id() {
  destination_id_ = 0;
  clear_has_destination_id();
}
inline ::google::protobuf::int32 ArteCommand::destination_id() const {
  return destination_id_;
}
inline void ArteCommand::set_destination_id(::google::protobuf::int32 value) {
  set_has_destination_id();
  destination_id_ = value;
}

// optional string message_string = 4;
inline bool ArteCommand::has_message_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArteCommand::set_has_message_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArteCommand::clear_has_message_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArteCommand::clear_message_string() {
  if (message_string_ != &::google::protobuf::internal::kEmptyString) {
    message_string_->clear();
  }
  clear_has_message_string();
}
inline const ::std::string& ArteCommand::message_string() const {
  return *message_string_;
}
inline void ArteCommand::set_message_string(const ::std::string& value) {
  set_has_message_string();
  if (message_string_ == &::google::protobuf::internal::kEmptyString) {
    message_string_ = new ::std::string;
  }
  message_string_->assign(value);
}
inline void ArteCommand::set_message_string(const char* value) {
  set_has_message_string();
  if (message_string_ == &::google::protobuf::internal::kEmptyString) {
    message_string_ = new ::std::string;
  }
  message_string_->assign(value);
}
inline void ArteCommand::set_message_string(const char* value, size_t size) {
  set_has_message_string();
  if (message_string_ == &::google::protobuf::internal::kEmptyString) {
    message_string_ = new ::std::string;
  }
  message_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArteCommand::mutable_message_string() {
  set_has_message_string();
  if (message_string_ == &::google::protobuf::internal::kEmptyString) {
    message_string_ = new ::std::string;
  }
  return message_string_;
}
inline ::std::string* ArteCommand::release_message_string() {
  clear_has_message_string();
  if (message_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_string_;
    message_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .SetThresholdCommand set_thresh_command = 10;
inline bool ArteCommand::has_set_thresh_command() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArteCommand::set_has_set_thresh_command() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArteCommand::clear_has_set_thresh_command() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArteCommand::clear_set_thresh_command() {
  if (set_thresh_command_ != NULL) set_thresh_command_->::SetThresholdCommand::Clear();
  clear_has_set_thresh_command();
}
inline const ::SetThresholdCommand& ArteCommand::set_thresh_command() const {
  return set_thresh_command_ != NULL ? *set_thresh_command_ : *default_instance_->set_thresh_command_;
}
inline ::SetThresholdCommand* ArteCommand::mutable_set_thresh_command() {
  set_has_set_thresh_command();
  if (set_thresh_command_ == NULL) set_thresh_command_ = new ::SetThresholdCommand;
  return set_thresh_command_;
}
inline ::SetThresholdCommand* ArteCommand::release_set_thresh_command() {
  clear_has_set_thresh_command();
  ::SetThresholdCommand* temp = set_thresh_command_;
  set_thresh_command_ = NULL;
  return temp;
}

// optional .SetPostsampsCommand set_postsamps_command = 11;
inline bool ArteCommand::has_set_postsamps_command() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArteCommand::set_has_set_postsamps_command() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArteCommand::clear_has_set_postsamps_command() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArteCommand::clear_set_postsamps_command() {
  if (set_postsamps_command_ != NULL) set_postsamps_command_->::SetPostsampsCommand::Clear();
  clear_has_set_postsamps_command();
}
inline const ::SetPostsampsCommand& ArteCommand::set_postsamps_command() const {
  return set_postsamps_command_ != NULL ? *set_postsamps_command_ : *default_instance_->set_postsamps_command_;
}
inline ::SetPostsampsCommand* ArteCommand::mutable_set_postsamps_command() {
  set_has_set_postsamps_command();
  if (set_postsamps_command_ == NULL) set_postsamps_command_ = new ::SetPostsampsCommand;
  return set_postsamps_command_;
}
inline ::SetPostsampsCommand* ArteCommand::release_set_postsamps_command() {
  clear_has_set_postsamps_command();
  ::SetPostsampsCommand* temp = set_postsamps_command_;
  set_postsamps_command_ = NULL;
  return temp;
}

// optional .ResetClockCommand reset_clock_command = 12;
inline bool ArteCommand::has_reset_clock_command() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArteCommand::set_has_reset_clock_command() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArteCommand::clear_has_reset_clock_command() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArteCommand::clear_reset_clock_command() {
  if (reset_clock_command_ != NULL) reset_clock_command_->::ResetClockCommand::Clear();
  clear_has_reset_clock_command();
}
inline const ::ResetClockCommand& ArteCommand::reset_clock_command() const {
  return reset_clock_command_ != NULL ? *reset_clock_command_ : *default_instance_->reset_clock_command_;
}
inline ::ResetClockCommand* ArteCommand::mutable_reset_clock_command() {
  set_has_reset_clock_command();
  if (reset_clock_command_ == NULL) reset_clock_command_ = new ::ResetClockCommand;
  return reset_clock_command_;
}
inline ::ResetClockCommand* ArteCommand::release_reset_clock_command() {
  clear_has_reset_clock_command();
  ::ResetClockCommand* temp = reset_clock_command_;
  reset_clock_command_ = NULL;
  return temp;
}

// optional .DiskCommand disk_command = 13;
inline bool ArteCommand::has_disk_command() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArteCommand::set_has_disk_command() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArteCommand::clear_has_disk_command() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArteCommand::clear_disk_command() {
  if (disk_command_ != NULL) disk_command_->::DiskCommand::Clear();
  clear_has_disk_command();
}
inline const ::DiskCommand& ArteCommand::disk_command() const {
  return disk_command_ != NULL ? *disk_command_ : *default_instance_->disk_command_;
}
inline ::DiskCommand* ArteCommand::mutable_disk_command() {
  set_has_disk_command();
  if (disk_command_ == NULL) disk_command_ = new ::DiskCommand;
  return disk_command_;
}
inline ::DiskCommand* ArteCommand::release_disk_command() {
  clear_has_disk_command();
  ::DiskCommand* temp = disk_command_;
  disk_command_ = NULL;
  return temp;
}

// optional .ClockAndDiskCommand clock_and_disk_command = 14;
inline bool ArteCommand::has_clock_and_disk_command() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArteCommand::set_has_clock_and_disk_command() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArteCommand::clear_has_clock_and_disk_command() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArteCommand::clear_clock_and_disk_command() {
  if (clock_and_disk_command_ != NULL) clock_and_disk_command_->::ClockAndDiskCommand::Clear();
  clear_has_clock_and_disk_command();
}
inline const ::ClockAndDiskCommand& ArteCommand::clock_and_disk_command() const {
  return clock_and_disk_command_ != NULL ? *clock_and_disk_command_ : *default_instance_->clock_and_disk_command_;
}
inline ::ClockAndDiskCommand* ArteCommand::mutable_clock_and_disk_command() {
  set_has_clock_and_disk_command();
  if (clock_and_disk_command_ == NULL) clock_and_disk_command_ = new ::ClockAndDiskCommand;
  return clock_and_disk_command_;
}
inline ::ClockAndDiskCommand* ArteCommand::release_clock_and_disk_command() {
  clear_has_clock_and_disk_command();
  ::ClockAndDiskCommand* temp = clock_and_disk_command_;
  clock_and_disk_command_ = NULL;
  return temp;
}

// optional .ClearProjectionsCommand clear_projections_command = 15;
inline bool ArteCommand::has_clear_projections_command() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArteCommand::set_has_clear_projections_command() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArteCommand::clear_has_clear_projections_command() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArteCommand::clear_clear_projections_command() {
  if (clear_projections_command_ != NULL) clear_projections_command_->::ClearProjectionsCommand::Clear();
  clear_has_clear_projections_command();
}
inline const ::ClearProjectionsCommand& ArteCommand::clear_projections_command() const {
  return clear_projections_command_ != NULL ? *clear_projections_command_ : *default_instance_->clear_projections_command_;
}
inline ::ClearProjectionsCommand* ArteCommand::mutable_clear_projections_command() {
  set_has_clear_projections_command();
  if (clear_projections_command_ == NULL) clear_projections_command_ = new ::ClearProjectionsCommand;
  return clear_projections_command_;
}
inline ::ClearProjectionsCommand* ArteCommand::release_clear_projections_command() {
  clear_has_clear_projections_command();
  ::ClearProjectionsCommand* temp = clear_projections_command_;
  clear_projections_command_ = NULL;
  return temp;
}

// optional .ClearLfpbankCommand clear_lfpbank_command = 16;
inline bool ArteCommand::has_clear_lfpbank_command() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ArteCommand::set_has_clear_lfpbank_command() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ArteCommand::clear_has_clear_lfpbank_command() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ArteCommand::clear_clear_lfpbank_command() {
  if (clear_lfpbank_command_ != NULL) clear_lfpbank_command_->::ClearLfpbankCommand::Clear();
  clear_has_clear_lfpbank_command();
}
inline const ::ClearLfpbankCommand& ArteCommand::clear_lfpbank_command() const {
  return clear_lfpbank_command_ != NULL ? *clear_lfpbank_command_ : *default_instance_->clear_lfpbank_command_;
}
inline ::ClearLfpbankCommand* ArteCommand::mutable_clear_lfpbank_command() {
  set_has_clear_lfpbank_command();
  if (clear_lfpbank_command_ == NULL) clear_lfpbank_command_ = new ::ClearLfpbankCommand;
  return clear_lfpbank_command_;
}
inline ::ClearLfpbankCommand* ArteCommand::release_clear_lfpbank_command() {
  clear_has_clear_lfpbank_command();
  ::ClearLfpbankCommand* temp = clear_lfpbank_command_;
  clear_lfpbank_command_ = NULL;
  return temp;
}

// optional .MaximizeViewCommand maximize_view_command = 17;
inline bool ArteCommand::has_maximize_view_command() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ArteCommand::set_has_maximize_view_command() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ArteCommand::clear_has_maximize_view_command() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ArteCommand::clear_maximize_view_command() {
  if (maximize_view_command_ != NULL) maximize_view_command_->::MaximizeViewCommand::Clear();
  clear_has_maximize_view_command();
}
inline const ::MaximizeViewCommand& ArteCommand::maximize_view_command() const {
  return maximize_view_command_ != NULL ? *maximize_view_command_ : *default_instance_->maximize_view_command_;
}
inline ::MaximizeViewCommand* ArteCommand::mutable_maximize_view_command() {
  set_has_maximize_view_command();
  if (maximize_view_command_ == NULL) maximize_view_command_ = new ::MaximizeViewCommand;
  return maximize_view_command_;
}
inline ::MaximizeViewCommand* ArteCommand::release_maximize_view_command() {
  clear_has_maximize_view_command();
  ::MaximizeViewCommand* temp = maximize_view_command_;
  maximize_view_command_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SetThresholdCommand

// repeated float threshold = 1;
inline int SetThresholdCommand::threshold_size() const {
  return threshold_.size();
}
inline void SetThresholdCommand::clear_threshold() {
  threshold_.Clear();
}
inline float SetThresholdCommand::threshold(int index) const {
  return threshold_.Get(index);
}
inline void SetThresholdCommand::set_threshold(int index, float value) {
  threshold_.Set(index, value);
}
inline void SetThresholdCommand::add_threshold(float value) {
  threshold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
SetThresholdCommand::threshold() const {
  return threshold_;
}
inline ::google::protobuf::RepeatedField< float >*
SetThresholdCommand::mutable_threshold() {
  return &threshold_;
}

// repeated int32 trodename = 2;
inline int SetThresholdCommand::trodename_size() const {
  return trodename_.size();
}
inline void SetThresholdCommand::clear_trodename() {
  trodename_.Clear();
}
inline ::google::protobuf::int32 SetThresholdCommand::trodename(int index) const {
  return trodename_.Get(index);
}
inline void SetThresholdCommand::set_trodename(int index, ::google::protobuf::int32 value) {
  trodename_.Set(index, value);
}
inline void SetThresholdCommand::add_trodename(::google::protobuf::int32 value) {
  trodename_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SetThresholdCommand::trodename() const {
  return trodename_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SetThresholdCommand::mutable_trodename() {
  return &trodename_;
}

// repeated int32 chanind = 3;
inline int SetThresholdCommand::chanind_size() const {
  return chanind_.size();
}
inline void SetThresholdCommand::clear_chanind() {
  chanind_.Clear();
}
inline ::google::protobuf::int32 SetThresholdCommand::chanind(int index) const {
  return chanind_.Get(index);
}
inline void SetThresholdCommand::set_chanind(int index, ::google::protobuf::int32 value) {
  chanind_.Set(index, value);
}
inline void SetThresholdCommand::add_chanind(::google::protobuf::int32 value) {
  chanind_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SetThresholdCommand::chanind() const {
  return chanind_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SetThresholdCommand::mutable_chanind() {
  return &chanind_;
}

// optional .SetThresholdCommand.ThresholdUnits units = 4 [default = BRAIN_VOLTAGE];
inline bool SetThresholdCommand::has_units() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetThresholdCommand::set_has_units() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetThresholdCommand::clear_has_units() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetThresholdCommand::clear_units() {
  units_ = 0;
  clear_has_units();
}
inline ::SetThresholdCommand_ThresholdUnits SetThresholdCommand::units() const {
  return static_cast< ::SetThresholdCommand_ThresholdUnits >(units_);
}
inline void SetThresholdCommand::set_units(::SetThresholdCommand_ThresholdUnits value) {
  GOOGLE_DCHECK(::SetThresholdCommand_ThresholdUnits_IsValid(value));
  set_has_units();
  units_ = value;
}

// -------------------------------------------------------------------

// SetPostsampsCommand

// optional int32 postsamps = 1 [default = 26];
inline bool SetPostsampsCommand::has_postsamps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetPostsampsCommand::set_has_postsamps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetPostsampsCommand::clear_has_postsamps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetPostsampsCommand::clear_postsamps() {
  postsamps_ = 26;
  clear_has_postsamps();
}
inline ::google::protobuf::int32 SetPostsampsCommand::postsamps() const {
  return postsamps_;
}
inline void SetPostsampsCommand::set_postsamps(::google::protobuf::int32 value) {
  set_has_postsamps();
  postsamps_ = value;
}

// repeated int32 trodename = 2;
inline int SetPostsampsCommand::trodename_size() const {
  return trodename_.size();
}
inline void SetPostsampsCommand::clear_trodename() {
  trodename_.Clear();
}
inline ::google::protobuf::int32 SetPostsampsCommand::trodename(int index) const {
  return trodename_.Get(index);
}
inline void SetPostsampsCommand::set_trodename(int index, ::google::protobuf::int32 value) {
  trodename_.Set(index, value);
}
inline void SetPostsampsCommand::add_trodename(::google::protobuf::int32 value) {
  trodename_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SetPostsampsCommand::trodename() const {
  return trodename_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SetPostsampsCommand::mutable_trodename() {
  return &trodename_;
}

// -------------------------------------------------------------------

// ResetClockCommand

// -------------------------------------------------------------------

// DiskCommand

// optional .DiskCommand.NewState new_state = 1 [default = ON];
inline bool DiskCommand::has_new_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskCommand::set_has_new_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiskCommand::clear_has_new_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiskCommand::clear_new_state() {
  new_state_ = 0;
  clear_has_new_state();
}
inline ::DiskCommand_NewState DiskCommand::new_state() const {
  return static_cast< ::DiskCommand_NewState >(new_state_);
}
inline void DiskCommand::set_new_state(::DiskCommand_NewState value) {
  GOOGLE_DCHECK(::DiskCommand_NewState_IsValid(value));
  set_has_new_state();
  new_state_ = value;
}

// -------------------------------------------------------------------

// ClockAndDiskCommand

// -------------------------------------------------------------------

// ClearProjectionsCommand

// repeated int32 trodename = 1;
inline int ClearProjectionsCommand::trodename_size() const {
  return trodename_.size();
}
inline void ClearProjectionsCommand::clear_trodename() {
  trodename_.Clear();
}
inline ::google::protobuf::int32 ClearProjectionsCommand::trodename(int index) const {
  return trodename_.Get(index);
}
inline void ClearProjectionsCommand::set_trodename(int index, ::google::protobuf::int32 value) {
  trodename_.Set(index, value);
}
inline void ClearProjectionsCommand::add_trodename(::google::protobuf::int32 value) {
  trodename_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClearProjectionsCommand::trodename() const {
  return trodename_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClearProjectionsCommand::mutable_trodename() {
  return &trodename_;
}

// -------------------------------------------------------------------

// ClearLfpbankCommand

// repeated int32 lfpbankname = 1;
inline int ClearLfpbankCommand::lfpbankname_size() const {
  return lfpbankname_.size();
}
inline void ClearLfpbankCommand::clear_lfpbankname() {
  lfpbankname_.Clear();
}
inline ::google::protobuf::int32 ClearLfpbankCommand::lfpbankname(int index) const {
  return lfpbankname_.Get(index);
}
inline void ClearLfpbankCommand::set_lfpbankname(int index, ::google::protobuf::int32 value) {
  lfpbankname_.Set(index, value);
}
inline void ClearLfpbankCommand::add_lfpbankname(::google::protobuf::int32 value) {
  lfpbankname_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClearLfpbankCommand::lfpbankname() const {
  return lfpbankname_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClearLfpbankCommand::mutable_lfpbankname() {
  return &lfpbankname_;
}

// -------------------------------------------------------------------

// MaximizeViewCommand

// optional int32 viewname = 1 [default = 0];
inline bool MaximizeViewCommand::has_viewname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaximizeViewCommand::set_has_viewname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaximizeViewCommand::clear_has_viewname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaximizeViewCommand::clear_viewname() {
  viewname_ = 0;
  clear_has_viewname();
}
inline ::google::protobuf::int32 MaximizeViewCommand::viewname() const {
  return viewname_;
}
inline void MaximizeViewCommand::set_viewname(::google::protobuf::int32 value) {
  set_has_viewname();
  viewname_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SetThresholdCommand_ThresholdUnits>() {
  return ::SetThresholdCommand_ThresholdUnits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DiskCommand_NewState>() {
  return ::DiskCommand_NewState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_arte_5fcommand_2eproto__INCLUDED
