// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "arte_pb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ArteSpikePb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArteSpikePb_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArteLfpPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArteLfpPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArteEventStringPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArteEventStringPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArteRawBufferPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArteRawBufferPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtePosPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtePosPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtePb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtePb_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_arte_5fpb_2eproto() {
  protobuf_AddDesc_arte_5fpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "arte_pb.proto");
  GOOGLE_CHECK(file != NULL);
  ArteSpikePb_descriptor_ = file->message_type(0);
  static const int ArteSpikePb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteSpikePb, source_trode_),
  };
  ArteSpikePb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArteSpikePb_descriptor_,
      ArteSpikePb::default_instance_,
      ArteSpikePb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteSpikePb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteSpikePb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArteSpikePb));
  ArteLfpPb_descriptor_ = file->message_type(1);
  static const int ArteLfpPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteLfpPb, source_lfpbank_),
  };
  ArteLfpPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArteLfpPb_descriptor_,
      ArteLfpPb::default_instance_,
      ArteLfpPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteLfpPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteLfpPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArteLfpPb));
  ArteEventStringPb_descriptor_ = file->message_type(2);
  static const int ArteEventStringPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteEventStringPb, eventstring_data_),
  };
  ArteEventStringPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArteEventStringPb_descriptor_,
      ArteEventStringPb::default_instance_,
      ArteEventStringPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteEventStringPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteEventStringPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArteEventStringPb));
  ArteRawBufferPb_descriptor_ = file->message_type(3);
  static const int ArteRawBufferPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteRawBufferPb, device_label_),
  };
  ArteRawBufferPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArteRawBufferPb_descriptor_,
      ArteRawBufferPb::default_instance_,
      ArteRawBufferPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteRawBufferPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArteRawBufferPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArteRawBufferPb));
  ArtePosPb_descriptor_ = file->message_type(4);
  static const int ArtePosPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePosPb, x_pos_),
  };
  ArtePosPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtePosPb_descriptor_,
      ArtePosPb::default_instance_,
      ArtePosPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePosPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePosPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtePosPb));
  ArtePb_descriptor_ = file->message_type(5);
  static const int ArtePb_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, arte_spike_pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, arte_lfp_pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, arte_command_pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, arte_event_string_pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, arte_raw_buffer_pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, arte_pos_pb_),
  };
  ArtePb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtePb_descriptor_,
      ArtePb::default_instance_,
      ArtePb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtePb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtePb));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_arte_5fpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArteSpikePb_descriptor_, &ArteSpikePb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArteLfpPb_descriptor_, &ArteLfpPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArteEventStringPb_descriptor_, &ArteEventStringPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArteRawBufferPb_descriptor_, &ArteRawBufferPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtePosPb_descriptor_, &ArtePosPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtePb_descriptor_, &ArtePb::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_arte_5fpb_2eproto() {
  delete ArteSpikePb::default_instance_;
  delete ArteSpikePb_reflection_;
  delete ArteLfpPb::default_instance_;
  delete ArteLfpPb_reflection_;
  delete ArteEventStringPb::default_instance_;
  delete ArteEventStringPb_reflection_;
  delete ArteRawBufferPb::default_instance_;
  delete ArteRawBufferPb_reflection_;
  delete ArtePosPb::default_instance_;
  delete ArtePosPb_reflection_;
  delete ArtePb::default_instance_;
  delete ArtePb_reflection_;
}

void protobuf_AddDesc_arte_5fpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_arte_5fcommand_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rarte_pb.proto\032\022arte_command.proto\"#\n\013A"
    "rteSpikePb\022\024\n\014source_trode\030\001 \001(\005\"#\n\tArte"
    "LfpPb\022\026\n\016source_lfpbank\030\001 \001(\005\"-\n\021ArteEve"
    "ntStringPb\022\030\n\020eventstring_data\030\001 \001(\t\"\'\n\017"
    "ArteRawBufferPb\022\024\n\014device_label\030\001 \001(\t\"\032\n"
    "\tArtePosPb\022\r\n\005x_pos\030\001 \001(\002\"\211\002\n\006ArtePb\022\021\n\t"
    "timestamp\030\001 \001(\004\022#\n\rarte_spike_pb\030\002 \001(\0132\014"
    ".ArteSpikePb\022\037\n\013arte_lfp_pb\030\003 \001(\0132\n.Arte"
    "LfpPb\022%\n\017arte_command_pb\030\004 \001(\0132\014.ArteCom"
    "mand\0220\n\024arte_event_string_pb\030\005 \001(\0132\022.Art"
    "eEventStringPb\022,\n\022arte_raw_buffer_pb\030\006 \001"
    "(\0132\020.ArteRawBufferPb\022\037\n\013arte_pos_pb\030\007 \001("
    "\0132\n.ArtePosPb", 493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "arte_pb.proto", &protobuf_RegisterTypes);
  ArteSpikePb::default_instance_ = new ArteSpikePb();
  ArteLfpPb::default_instance_ = new ArteLfpPb();
  ArteEventStringPb::default_instance_ = new ArteEventStringPb();
  ArteRawBufferPb::default_instance_ = new ArteRawBufferPb();
  ArtePosPb::default_instance_ = new ArtePosPb();
  ArtePb::default_instance_ = new ArtePb();
  ArteSpikePb::default_instance_->InitAsDefaultInstance();
  ArteLfpPb::default_instance_->InitAsDefaultInstance();
  ArteEventStringPb::default_instance_->InitAsDefaultInstance();
  ArteRawBufferPb::default_instance_->InitAsDefaultInstance();
  ArtePosPb::default_instance_->InitAsDefaultInstance();
  ArtePb::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_arte_5fpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_arte_5fpb_2eproto {
  StaticDescriptorInitializer_arte_5fpb_2eproto() {
    protobuf_AddDesc_arte_5fpb_2eproto();
  }
} static_descriptor_initializer_arte_5fpb_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ArteSpikePb::kSourceTrodeFieldNumber;
#endif  // !_MSC_VER

ArteSpikePb::ArteSpikePb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArteSpikePb::InitAsDefaultInstance() {
}

ArteSpikePb::ArteSpikePb(const ArteSpikePb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArteSpikePb::SharedCtor() {
  _cached_size_ = 0;
  source_trode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArteSpikePb::~ArteSpikePb() {
  SharedDtor();
}

void ArteSpikePb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArteSpikePb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArteSpikePb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArteSpikePb_descriptor_;
}

const ArteSpikePb& ArteSpikePb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fpb_2eproto();  return *default_instance_;
}

ArteSpikePb* ArteSpikePb::default_instance_ = NULL;

ArteSpikePb* ArteSpikePb::New() const {
  return new ArteSpikePb;
}

void ArteSpikePb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_trode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArteSpikePb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 source_trode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_trode_)));
          set_has_source_trode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArteSpikePb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 source_trode = 1;
  if (has_source_trode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source_trode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArteSpikePb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 source_trode = 1;
  if (has_source_trode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source_trode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArteSpikePb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 source_trode = 1;
    if (has_source_trode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_trode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArteSpikePb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArteSpikePb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArteSpikePb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArteSpikePb::MergeFrom(const ArteSpikePb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_trode()) {
      set_source_trode(from.source_trode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArteSpikePb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArteSpikePb::CopyFrom(const ArteSpikePb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArteSpikePb::IsInitialized() const {
  
  return true;
}

void ArteSpikePb::Swap(ArteSpikePb* other) {
  if (other != this) {
    std::swap(source_trode_, other->source_trode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArteSpikePb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArteSpikePb_descriptor_;
  metadata.reflection = ArteSpikePb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArteLfpPb::kSourceLfpbankFieldNumber;
#endif  // !_MSC_VER

ArteLfpPb::ArteLfpPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArteLfpPb::InitAsDefaultInstance() {
}

ArteLfpPb::ArteLfpPb(const ArteLfpPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArteLfpPb::SharedCtor() {
  _cached_size_ = 0;
  source_lfpbank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArteLfpPb::~ArteLfpPb() {
  SharedDtor();
}

void ArteLfpPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArteLfpPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArteLfpPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArteLfpPb_descriptor_;
}

const ArteLfpPb& ArteLfpPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fpb_2eproto();  return *default_instance_;
}

ArteLfpPb* ArteLfpPb::default_instance_ = NULL;

ArteLfpPb* ArteLfpPb::New() const {
  return new ArteLfpPb;
}

void ArteLfpPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_lfpbank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArteLfpPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 source_lfpbank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_lfpbank_)));
          set_has_source_lfpbank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArteLfpPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 source_lfpbank = 1;
  if (has_source_lfpbank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source_lfpbank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArteLfpPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 source_lfpbank = 1;
  if (has_source_lfpbank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source_lfpbank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArteLfpPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 source_lfpbank = 1;
    if (has_source_lfpbank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_lfpbank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArteLfpPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArteLfpPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArteLfpPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArteLfpPb::MergeFrom(const ArteLfpPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_lfpbank()) {
      set_source_lfpbank(from.source_lfpbank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArteLfpPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArteLfpPb::CopyFrom(const ArteLfpPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArteLfpPb::IsInitialized() const {
  
  return true;
}

void ArteLfpPb::Swap(ArteLfpPb* other) {
  if (other != this) {
    std::swap(source_lfpbank_, other->source_lfpbank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArteLfpPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArteLfpPb_descriptor_;
  metadata.reflection = ArteLfpPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArteEventStringPb::kEventstringDataFieldNumber;
#endif  // !_MSC_VER

ArteEventStringPb::ArteEventStringPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArteEventStringPb::InitAsDefaultInstance() {
}

ArteEventStringPb::ArteEventStringPb(const ArteEventStringPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArteEventStringPb::SharedCtor() {
  _cached_size_ = 0;
  eventstring_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArteEventStringPb::~ArteEventStringPb() {
  SharedDtor();
}

void ArteEventStringPb::SharedDtor() {
  if (eventstring_data_ != &::google::protobuf::internal::kEmptyString) {
    delete eventstring_data_;
  }
  if (this != default_instance_) {
  }
}

void ArteEventStringPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArteEventStringPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArteEventStringPb_descriptor_;
}

const ArteEventStringPb& ArteEventStringPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fpb_2eproto();  return *default_instance_;
}

ArteEventStringPb* ArteEventStringPb::default_instance_ = NULL;

ArteEventStringPb* ArteEventStringPb::New() const {
  return new ArteEventStringPb;
}

void ArteEventStringPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventstring_data()) {
      if (eventstring_data_ != &::google::protobuf::internal::kEmptyString) {
        eventstring_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArteEventStringPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eventstring_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventstring_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventstring_data().data(), this->eventstring_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArteEventStringPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eventstring_data = 1;
  if (has_eventstring_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventstring_data().data(), this->eventstring_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eventstring_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArteEventStringPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eventstring_data = 1;
  if (has_eventstring_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventstring_data().data(), this->eventstring_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventstring_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArteEventStringPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string eventstring_data = 1;
    if (has_eventstring_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventstring_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArteEventStringPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArteEventStringPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArteEventStringPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArteEventStringPb::MergeFrom(const ArteEventStringPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventstring_data()) {
      set_eventstring_data(from.eventstring_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArteEventStringPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArteEventStringPb::CopyFrom(const ArteEventStringPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArteEventStringPb::IsInitialized() const {
  
  return true;
}

void ArteEventStringPb::Swap(ArteEventStringPb* other) {
  if (other != this) {
    std::swap(eventstring_data_, other->eventstring_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArteEventStringPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArteEventStringPb_descriptor_;
  metadata.reflection = ArteEventStringPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArteRawBufferPb::kDeviceLabelFieldNumber;
#endif  // !_MSC_VER

ArteRawBufferPb::ArteRawBufferPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArteRawBufferPb::InitAsDefaultInstance() {
}

ArteRawBufferPb::ArteRawBufferPb(const ArteRawBufferPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArteRawBufferPb::SharedCtor() {
  _cached_size_ = 0;
  device_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArteRawBufferPb::~ArteRawBufferPb() {
  SharedDtor();
}

void ArteRawBufferPb::SharedDtor() {
  if (device_label_ != &::google::protobuf::internal::kEmptyString) {
    delete device_label_;
  }
  if (this != default_instance_) {
  }
}

void ArteRawBufferPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArteRawBufferPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArteRawBufferPb_descriptor_;
}

const ArteRawBufferPb& ArteRawBufferPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fpb_2eproto();  return *default_instance_;
}

ArteRawBufferPb* ArteRawBufferPb::default_instance_ = NULL;

ArteRawBufferPb* ArteRawBufferPb::New() const {
  return new ArteRawBufferPb;
}

void ArteRawBufferPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_label()) {
      if (device_label_ != &::google::protobuf::internal::kEmptyString) {
        device_label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArteRawBufferPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_label().data(), this->device_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArteRawBufferPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_label = 1;
  if (has_device_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_label().data(), this->device_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_label(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArteRawBufferPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_label = 1;
  if (has_device_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_label().data(), this->device_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_label(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArteRawBufferPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_label = 1;
    if (has_device_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_label());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArteRawBufferPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArteRawBufferPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArteRawBufferPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArteRawBufferPb::MergeFrom(const ArteRawBufferPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_label()) {
      set_device_label(from.device_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArteRawBufferPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArteRawBufferPb::CopyFrom(const ArteRawBufferPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArteRawBufferPb::IsInitialized() const {
  
  return true;
}

void ArteRawBufferPb::Swap(ArteRawBufferPb* other) {
  if (other != this) {
    std::swap(device_label_, other->device_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArteRawBufferPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArteRawBufferPb_descriptor_;
  metadata.reflection = ArteRawBufferPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtePosPb::kXPosFieldNumber;
#endif  // !_MSC_VER

ArtePosPb::ArtePosPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtePosPb::InitAsDefaultInstance() {
}

ArtePosPb::ArtePosPb(const ArtePosPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtePosPb::SharedCtor() {
  _cached_size_ = 0;
  x_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtePosPb::~ArtePosPb() {
  SharedDtor();
}

void ArtePosPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtePosPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtePosPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtePosPb_descriptor_;
}

const ArtePosPb& ArtePosPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fpb_2eproto();  return *default_instance_;
}

ArtePosPb* ArtePosPb::default_instance_ = NULL;

ArtePosPb* ArtePosPb::New() const {
  return new ArtePosPb;
}

void ArtePosPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtePosPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtePosPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x_pos = 1;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtePosPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x_pos = 1;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtePosPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x_pos = 1;
    if (has_x_pos()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtePosPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtePosPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtePosPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtePosPb::MergeFrom(const ArtePosPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtePosPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtePosPb::CopyFrom(const ArtePosPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtePosPb::IsInitialized() const {
  
  return true;
}

void ArtePosPb::Swap(ArtePosPb* other) {
  if (other != this) {
    std::swap(x_pos_, other->x_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtePosPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtePosPb_descriptor_;
  metadata.reflection = ArtePosPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtePb::kTimestampFieldNumber;
const int ArtePb::kArteSpikePbFieldNumber;
const int ArtePb::kArteLfpPbFieldNumber;
const int ArtePb::kArteCommandPbFieldNumber;
const int ArtePb::kArteEventStringPbFieldNumber;
const int ArtePb::kArteRawBufferPbFieldNumber;
const int ArtePb::kArtePosPbFieldNumber;
#endif  // !_MSC_VER

ArtePb::ArtePb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtePb::InitAsDefaultInstance() {
  arte_spike_pb_ = const_cast< ::ArteSpikePb*>(&::ArteSpikePb::default_instance());
  arte_lfp_pb_ = const_cast< ::ArteLfpPb*>(&::ArteLfpPb::default_instance());
  arte_command_pb_ = const_cast< ::ArteCommand*>(&::ArteCommand::default_instance());
  arte_event_string_pb_ = const_cast< ::ArteEventStringPb*>(&::ArteEventStringPb::default_instance());
  arte_raw_buffer_pb_ = const_cast< ::ArteRawBufferPb*>(&::ArteRawBufferPb::default_instance());
  arte_pos_pb_ = const_cast< ::ArtePosPb*>(&::ArtePosPb::default_instance());
}

ArtePb::ArtePb(const ArtePb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtePb::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  arte_spike_pb_ = NULL;
  arte_lfp_pb_ = NULL;
  arte_command_pb_ = NULL;
  arte_event_string_pb_ = NULL;
  arte_raw_buffer_pb_ = NULL;
  arte_pos_pb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtePb::~ArtePb() {
  SharedDtor();
}

void ArtePb::SharedDtor() {
  if (this != default_instance_) {
    delete arte_spike_pb_;
    delete arte_lfp_pb_;
    delete arte_command_pb_;
    delete arte_event_string_pb_;
    delete arte_raw_buffer_pb_;
    delete arte_pos_pb_;
  }
}

void ArtePb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtePb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtePb_descriptor_;
}

const ArtePb& ArtePb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arte_5fpb_2eproto();  return *default_instance_;
}

ArtePb* ArtePb::default_instance_ = NULL;

ArtePb* ArtePb::New() const {
  return new ArtePb;
}

void ArtePb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_arte_spike_pb()) {
      if (arte_spike_pb_ != NULL) arte_spike_pb_->::ArteSpikePb::Clear();
    }
    if (has_arte_lfp_pb()) {
      if (arte_lfp_pb_ != NULL) arte_lfp_pb_->::ArteLfpPb::Clear();
    }
    if (has_arte_command_pb()) {
      if (arte_command_pb_ != NULL) arte_command_pb_->::ArteCommand::Clear();
    }
    if (has_arte_event_string_pb()) {
      if (arte_event_string_pb_ != NULL) arte_event_string_pb_->::ArteEventStringPb::Clear();
    }
    if (has_arte_raw_buffer_pb()) {
      if (arte_raw_buffer_pb_ != NULL) arte_raw_buffer_pb_->::ArteRawBufferPb::Clear();
    }
    if (has_arte_pos_pb()) {
      if (arte_pos_pb_ != NULL) arte_pos_pb_->::ArtePosPb::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtePb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arte_spike_pb;
        break;
      }
      
      // optional .ArteSpikePb arte_spike_pb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arte_spike_pb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arte_spike_pb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_arte_lfp_pb;
        break;
      }
      
      // optional .ArteLfpPb arte_lfp_pb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arte_lfp_pb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arte_lfp_pb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arte_command_pb;
        break;
      }
      
      // optional .ArteCommand arte_command_pb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arte_command_pb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arte_command_pb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_arte_event_string_pb;
        break;
      }
      
      // optional .ArteEventStringPb arte_event_string_pb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arte_event_string_pb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arte_event_string_pb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_arte_raw_buffer_pb;
        break;
      }
      
      // optional .ArteRawBufferPb arte_raw_buffer_pb = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arte_raw_buffer_pb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arte_raw_buffer_pb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_arte_pos_pb;
        break;
      }
      
      // optional .ArtePosPb arte_pos_pb = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arte_pos_pb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arte_pos_pb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtePb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }
  
  // optional .ArteSpikePb arte_spike_pb = 2;
  if (has_arte_spike_pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arte_spike_pb(), output);
  }
  
  // optional .ArteLfpPb arte_lfp_pb = 3;
  if (has_arte_lfp_pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arte_lfp_pb(), output);
  }
  
  // optional .ArteCommand arte_command_pb = 4;
  if (has_arte_command_pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arte_command_pb(), output);
  }
  
  // optional .ArteEventStringPb arte_event_string_pb = 5;
  if (has_arte_event_string_pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arte_event_string_pb(), output);
  }
  
  // optional .ArteRawBufferPb arte_raw_buffer_pb = 6;
  if (has_arte_raw_buffer_pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arte_raw_buffer_pb(), output);
  }
  
  // optional .ArtePosPb arte_pos_pb = 7;
  if (has_arte_pos_pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->arte_pos_pb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtePb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional .ArteSpikePb arte_spike_pb = 2;
  if (has_arte_spike_pb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arte_spike_pb(), target);
  }
  
  // optional .ArteLfpPb arte_lfp_pb = 3;
  if (has_arte_lfp_pb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arte_lfp_pb(), target);
  }
  
  // optional .ArteCommand arte_command_pb = 4;
  if (has_arte_command_pb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arte_command_pb(), target);
  }
  
  // optional .ArteEventStringPb arte_event_string_pb = 5;
  if (has_arte_event_string_pb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arte_event_string_pb(), target);
  }
  
  // optional .ArteRawBufferPb arte_raw_buffer_pb = 6;
  if (has_arte_raw_buffer_pb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arte_raw_buffer_pb(), target);
  }
  
  // optional .ArtePosPb arte_pos_pb = 7;
  if (has_arte_pos_pb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->arte_pos_pb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtePb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional .ArteSpikePb arte_spike_pb = 2;
    if (has_arte_spike_pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arte_spike_pb());
    }
    
    // optional .ArteLfpPb arte_lfp_pb = 3;
    if (has_arte_lfp_pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arte_lfp_pb());
    }
    
    // optional .ArteCommand arte_command_pb = 4;
    if (has_arte_command_pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arte_command_pb());
    }
    
    // optional .ArteEventStringPb arte_event_string_pb = 5;
    if (has_arte_event_string_pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arte_event_string_pb());
    }
    
    // optional .ArteRawBufferPb arte_raw_buffer_pb = 6;
    if (has_arte_raw_buffer_pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arte_raw_buffer_pb());
    }
    
    // optional .ArtePosPb arte_pos_pb = 7;
    if (has_arte_pos_pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arte_pos_pb());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtePb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtePb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtePb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtePb::MergeFrom(const ArtePb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_arte_spike_pb()) {
      mutable_arte_spike_pb()->::ArteSpikePb::MergeFrom(from.arte_spike_pb());
    }
    if (from.has_arte_lfp_pb()) {
      mutable_arte_lfp_pb()->::ArteLfpPb::MergeFrom(from.arte_lfp_pb());
    }
    if (from.has_arte_command_pb()) {
      mutable_arte_command_pb()->::ArteCommand::MergeFrom(from.arte_command_pb());
    }
    if (from.has_arte_event_string_pb()) {
      mutable_arte_event_string_pb()->::ArteEventStringPb::MergeFrom(from.arte_event_string_pb());
    }
    if (from.has_arte_raw_buffer_pb()) {
      mutable_arte_raw_buffer_pb()->::ArteRawBufferPb::MergeFrom(from.arte_raw_buffer_pb());
    }
    if (from.has_arte_pos_pb()) {
      mutable_arte_pos_pb()->::ArtePosPb::MergeFrom(from.arte_pos_pb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtePb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtePb::CopyFrom(const ArtePb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtePb::IsInitialized() const {
  
  return true;
}

void ArtePb::Swap(ArtePb* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(arte_spike_pb_, other->arte_spike_pb_);
    std::swap(arte_lfp_pb_, other->arte_lfp_pb_);
    std::swap(arte_command_pb_, other->arte_command_pb_);
    std::swap(arte_event_string_pb_, other->arte_event_string_pb_);
    std::swap(arte_raw_buffer_pb_, other->arte_raw_buffer_pb_);
    std::swap(arte_pos_pb_, other->arte_pos_pb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtePb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtePb_descriptor_;
  metadata.reflection = ArtePb_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
