// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arte_pb.proto

#ifndef PROTOBUF_arte_5fpb_2eproto__INCLUDED
#define PROTOBUF_arte_5fpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "arte_command.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_arte_5fpb_2eproto();
void protobuf_AssignDesc_arte_5fpb_2eproto();
void protobuf_ShutdownFile_arte_5fpb_2eproto();

class ArteSpikePb;
class ArteLfpPb;
class ArteEventStringPb;
class ArteRawBufferPb;
class ArtePosPb;
class ArtePb;

// ===================================================================

class ArteSpikePb : public ::google::protobuf::Message {
 public:
  ArteSpikePb();
  virtual ~ArteSpikePb();
  
  ArteSpikePb(const ArteSpikePb& from);
  
  inline ArteSpikePb& operator=(const ArteSpikePb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArteSpikePb& default_instance();
  
  void Swap(ArteSpikePb* other);
  
  // implements Message ----------------------------------------------
  
  ArteSpikePb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArteSpikePb& from);
  void MergeFrom(const ArteSpikePb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 source_trode = 1;
  inline bool has_source_trode() const;
  inline void clear_source_trode();
  static const int kSourceTrodeFieldNumber = 1;
  inline ::google::protobuf::int32 source_trode() const;
  inline void set_source_trode(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ArteSpikePb)
 private:
  inline void set_has_source_trode();
  inline void clear_has_source_trode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 source_trode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fpb_2eproto();
  friend void protobuf_AssignDesc_arte_5fpb_2eproto();
  friend void protobuf_ShutdownFile_arte_5fpb_2eproto();
  
  void InitAsDefaultInstance();
  static ArteSpikePb* default_instance_;
};
// -------------------------------------------------------------------

class ArteLfpPb : public ::google::protobuf::Message {
 public:
  ArteLfpPb();
  virtual ~ArteLfpPb();
  
  ArteLfpPb(const ArteLfpPb& from);
  
  inline ArteLfpPb& operator=(const ArteLfpPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArteLfpPb& default_instance();
  
  void Swap(ArteLfpPb* other);
  
  // implements Message ----------------------------------------------
  
  ArteLfpPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArteLfpPb& from);
  void MergeFrom(const ArteLfpPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 source_lfpbank = 1;
  inline bool has_source_lfpbank() const;
  inline void clear_source_lfpbank();
  static const int kSourceLfpbankFieldNumber = 1;
  inline ::google::protobuf::int32 source_lfpbank() const;
  inline void set_source_lfpbank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ArteLfpPb)
 private:
  inline void set_has_source_lfpbank();
  inline void clear_has_source_lfpbank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 source_lfpbank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fpb_2eproto();
  friend void protobuf_AssignDesc_arte_5fpb_2eproto();
  friend void protobuf_ShutdownFile_arte_5fpb_2eproto();
  
  void InitAsDefaultInstance();
  static ArteLfpPb* default_instance_;
};
// -------------------------------------------------------------------

class ArteEventStringPb : public ::google::protobuf::Message {
 public:
  ArteEventStringPb();
  virtual ~ArteEventStringPb();
  
  ArteEventStringPb(const ArteEventStringPb& from);
  
  inline ArteEventStringPb& operator=(const ArteEventStringPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArteEventStringPb& default_instance();
  
  void Swap(ArteEventStringPb* other);
  
  // implements Message ----------------------------------------------
  
  ArteEventStringPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArteEventStringPb& from);
  void MergeFrom(const ArteEventStringPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string eventstring_data = 1;
  inline bool has_eventstring_data() const;
  inline void clear_eventstring_data();
  static const int kEventstringDataFieldNumber = 1;
  inline const ::std::string& eventstring_data() const;
  inline void set_eventstring_data(const ::std::string& value);
  inline void set_eventstring_data(const char* value);
  inline void set_eventstring_data(const char* value, size_t size);
  inline ::std::string* mutable_eventstring_data();
  inline ::std::string* release_eventstring_data();
  
  // @@protoc_insertion_point(class_scope:ArteEventStringPb)
 private:
  inline void set_has_eventstring_data();
  inline void clear_has_eventstring_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* eventstring_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fpb_2eproto();
  friend void protobuf_AssignDesc_arte_5fpb_2eproto();
  friend void protobuf_ShutdownFile_arte_5fpb_2eproto();
  
  void InitAsDefaultInstance();
  static ArteEventStringPb* default_instance_;
};
// -------------------------------------------------------------------

class ArteRawBufferPb : public ::google::protobuf::Message {
 public:
  ArteRawBufferPb();
  virtual ~ArteRawBufferPb();
  
  ArteRawBufferPb(const ArteRawBufferPb& from);
  
  inline ArteRawBufferPb& operator=(const ArteRawBufferPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArteRawBufferPb& default_instance();
  
  void Swap(ArteRawBufferPb* other);
  
  // implements Message ----------------------------------------------
  
  ArteRawBufferPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArteRawBufferPb& from);
  void MergeFrom(const ArteRawBufferPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string device_label = 1;
  inline bool has_device_label() const;
  inline void clear_device_label();
  static const int kDeviceLabelFieldNumber = 1;
  inline const ::std::string& device_label() const;
  inline void set_device_label(const ::std::string& value);
  inline void set_device_label(const char* value);
  inline void set_device_label(const char* value, size_t size);
  inline ::std::string* mutable_device_label();
  inline ::std::string* release_device_label();
  
  // @@protoc_insertion_point(class_scope:ArteRawBufferPb)
 private:
  inline void set_has_device_label();
  inline void clear_has_device_label();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* device_label_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fpb_2eproto();
  friend void protobuf_AssignDesc_arte_5fpb_2eproto();
  friend void protobuf_ShutdownFile_arte_5fpb_2eproto();
  
  void InitAsDefaultInstance();
  static ArteRawBufferPb* default_instance_;
};
// -------------------------------------------------------------------

class ArtePosPb : public ::google::protobuf::Message {
 public:
  ArtePosPb();
  virtual ~ArtePosPb();
  
  ArtePosPb(const ArtePosPb& from);
  
  inline ArtePosPb& operator=(const ArtePosPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArtePosPb& default_instance();
  
  void Swap(ArtePosPb* other);
  
  // implements Message ----------------------------------------------
  
  ArtePosPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArtePosPb& from);
  void MergeFrom(const ArtePosPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float x_pos = 1;
  inline bool has_x_pos() const;
  inline void clear_x_pos();
  static const int kXPosFieldNumber = 1;
  inline float x_pos() const;
  inline void set_x_pos(float value);
  
  // @@protoc_insertion_point(class_scope:ArtePosPb)
 private:
  inline void set_has_x_pos();
  inline void clear_has_x_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fpb_2eproto();
  friend void protobuf_AssignDesc_arte_5fpb_2eproto();
  friend void protobuf_ShutdownFile_arte_5fpb_2eproto();
  
  void InitAsDefaultInstance();
  static ArtePosPb* default_instance_;
};
// -------------------------------------------------------------------

class ArtePb : public ::google::protobuf::Message {
 public:
  ArtePb();
  virtual ~ArtePb();
  
  ArtePb(const ArtePb& from);
  
  inline ArtePb& operator=(const ArtePb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArtePb& default_instance();
  
  void Swap(ArtePb* other);
  
  // implements Message ----------------------------------------------
  
  ArtePb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArtePb& from);
  void MergeFrom(const ArtePb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // optional .ArteSpikePb arte_spike_pb = 2;
  inline bool has_arte_spike_pb() const;
  inline void clear_arte_spike_pb();
  static const int kArteSpikePbFieldNumber = 2;
  inline const ::ArteSpikePb& arte_spike_pb() const;
  inline ::ArteSpikePb* mutable_arte_spike_pb();
  inline ::ArteSpikePb* release_arte_spike_pb();
  
  // optional .ArteLfpPb arte_lfp_pb = 3;
  inline bool has_arte_lfp_pb() const;
  inline void clear_arte_lfp_pb();
  static const int kArteLfpPbFieldNumber = 3;
  inline const ::ArteLfpPb& arte_lfp_pb() const;
  inline ::ArteLfpPb* mutable_arte_lfp_pb();
  inline ::ArteLfpPb* release_arte_lfp_pb();
  
  // optional .ArteCommand arte_command_pb = 4;
  inline bool has_arte_command_pb() const;
  inline void clear_arte_command_pb();
  static const int kArteCommandPbFieldNumber = 4;
  inline const ::ArteCommand& arte_command_pb() const;
  inline ::ArteCommand* mutable_arte_command_pb();
  inline ::ArteCommand* release_arte_command_pb();
  
  // optional .ArteEventStringPb arte_event_string_pb = 5;
  inline bool has_arte_event_string_pb() const;
  inline void clear_arte_event_string_pb();
  static const int kArteEventStringPbFieldNumber = 5;
  inline const ::ArteEventStringPb& arte_event_string_pb() const;
  inline ::ArteEventStringPb* mutable_arte_event_string_pb();
  inline ::ArteEventStringPb* release_arte_event_string_pb();
  
  // optional .ArteRawBufferPb arte_raw_buffer_pb = 6;
  inline bool has_arte_raw_buffer_pb() const;
  inline void clear_arte_raw_buffer_pb();
  static const int kArteRawBufferPbFieldNumber = 6;
  inline const ::ArteRawBufferPb& arte_raw_buffer_pb() const;
  inline ::ArteRawBufferPb* mutable_arte_raw_buffer_pb();
  inline ::ArteRawBufferPb* release_arte_raw_buffer_pb();
  
  // optional .ArtePosPb arte_pos_pb = 7;
  inline bool has_arte_pos_pb() const;
  inline void clear_arte_pos_pb();
  static const int kArtePosPbFieldNumber = 7;
  inline const ::ArtePosPb& arte_pos_pb() const;
  inline ::ArtePosPb* mutable_arte_pos_pb();
  inline ::ArtePosPb* release_arte_pos_pb();
  
  // @@protoc_insertion_point(class_scope:ArtePb)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_arte_spike_pb();
  inline void clear_has_arte_spike_pb();
  inline void set_has_arte_lfp_pb();
  inline void clear_has_arte_lfp_pb();
  inline void set_has_arte_command_pb();
  inline void clear_has_arte_command_pb();
  inline void set_has_arte_event_string_pb();
  inline void clear_has_arte_event_string_pb();
  inline void set_has_arte_raw_buffer_pb();
  inline void clear_has_arte_raw_buffer_pb();
  inline void set_has_arte_pos_pb();
  inline void clear_has_arte_pos_pb();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 timestamp_;
  ::ArteSpikePb* arte_spike_pb_;
  ::ArteLfpPb* arte_lfp_pb_;
  ::ArteCommand* arte_command_pb_;
  ::ArteEventStringPb* arte_event_string_pb_;
  ::ArteRawBufferPb* arte_raw_buffer_pb_;
  ::ArtePosPb* arte_pos_pb_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_arte_5fpb_2eproto();
  friend void protobuf_AssignDesc_arte_5fpb_2eproto();
  friend void protobuf_ShutdownFile_arte_5fpb_2eproto();
  
  void InitAsDefaultInstance();
  static ArtePb* default_instance_;
};
// ===================================================================


// ===================================================================

// ArteSpikePb

// optional int32 source_trode = 1;
inline bool ArteSpikePb::has_source_trode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArteSpikePb::set_has_source_trode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArteSpikePb::clear_has_source_trode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArteSpikePb::clear_source_trode() {
  source_trode_ = 0;
  clear_has_source_trode();
}
inline ::google::protobuf::int32 ArteSpikePb::source_trode() const {
  return source_trode_;
}
inline void ArteSpikePb::set_source_trode(::google::protobuf::int32 value) {
  set_has_source_trode();
  source_trode_ = value;
}

// -------------------------------------------------------------------

// ArteLfpPb

// optional int32 source_lfpbank = 1;
inline bool ArteLfpPb::has_source_lfpbank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArteLfpPb::set_has_source_lfpbank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArteLfpPb::clear_has_source_lfpbank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArteLfpPb::clear_source_lfpbank() {
  source_lfpbank_ = 0;
  clear_has_source_lfpbank();
}
inline ::google::protobuf::int32 ArteLfpPb::source_lfpbank() const {
  return source_lfpbank_;
}
inline void ArteLfpPb::set_source_lfpbank(::google::protobuf::int32 value) {
  set_has_source_lfpbank();
  source_lfpbank_ = value;
}

// -------------------------------------------------------------------

// ArteEventStringPb

// optional string eventstring_data = 1;
inline bool ArteEventStringPb::has_eventstring_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArteEventStringPb::set_has_eventstring_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArteEventStringPb::clear_has_eventstring_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArteEventStringPb::clear_eventstring_data() {
  if (eventstring_data_ != &::google::protobuf::internal::kEmptyString) {
    eventstring_data_->clear();
  }
  clear_has_eventstring_data();
}
inline const ::std::string& ArteEventStringPb::eventstring_data() const {
  return *eventstring_data_;
}
inline void ArteEventStringPb::set_eventstring_data(const ::std::string& value) {
  set_has_eventstring_data();
  if (eventstring_data_ == &::google::protobuf::internal::kEmptyString) {
    eventstring_data_ = new ::std::string;
  }
  eventstring_data_->assign(value);
}
inline void ArteEventStringPb::set_eventstring_data(const char* value) {
  set_has_eventstring_data();
  if (eventstring_data_ == &::google::protobuf::internal::kEmptyString) {
    eventstring_data_ = new ::std::string;
  }
  eventstring_data_->assign(value);
}
inline void ArteEventStringPb::set_eventstring_data(const char* value, size_t size) {
  set_has_eventstring_data();
  if (eventstring_data_ == &::google::protobuf::internal::kEmptyString) {
    eventstring_data_ = new ::std::string;
  }
  eventstring_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArteEventStringPb::mutable_eventstring_data() {
  set_has_eventstring_data();
  if (eventstring_data_ == &::google::protobuf::internal::kEmptyString) {
    eventstring_data_ = new ::std::string;
  }
  return eventstring_data_;
}
inline ::std::string* ArteEventStringPb::release_eventstring_data() {
  clear_has_eventstring_data();
  if (eventstring_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventstring_data_;
    eventstring_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ArteRawBufferPb

// optional string device_label = 1;
inline bool ArteRawBufferPb::has_device_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArteRawBufferPb::set_has_device_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArteRawBufferPb::clear_has_device_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArteRawBufferPb::clear_device_label() {
  if (device_label_ != &::google::protobuf::internal::kEmptyString) {
    device_label_->clear();
  }
  clear_has_device_label();
}
inline const ::std::string& ArteRawBufferPb::device_label() const {
  return *device_label_;
}
inline void ArteRawBufferPb::set_device_label(const ::std::string& value) {
  set_has_device_label();
  if (device_label_ == &::google::protobuf::internal::kEmptyString) {
    device_label_ = new ::std::string;
  }
  device_label_->assign(value);
}
inline void ArteRawBufferPb::set_device_label(const char* value) {
  set_has_device_label();
  if (device_label_ == &::google::protobuf::internal::kEmptyString) {
    device_label_ = new ::std::string;
  }
  device_label_->assign(value);
}
inline void ArteRawBufferPb::set_device_label(const char* value, size_t size) {
  set_has_device_label();
  if (device_label_ == &::google::protobuf::internal::kEmptyString) {
    device_label_ = new ::std::string;
  }
  device_label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArteRawBufferPb::mutable_device_label() {
  set_has_device_label();
  if (device_label_ == &::google::protobuf::internal::kEmptyString) {
    device_label_ = new ::std::string;
  }
  return device_label_;
}
inline ::std::string* ArteRawBufferPb::release_device_label() {
  clear_has_device_label();
  if (device_label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_label_;
    device_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ArtePosPb

// optional float x_pos = 1;
inline bool ArtePosPb::has_x_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArtePosPb::set_has_x_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArtePosPb::clear_has_x_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArtePosPb::clear_x_pos() {
  x_pos_ = 0;
  clear_has_x_pos();
}
inline float ArtePosPb::x_pos() const {
  return x_pos_;
}
inline void ArtePosPb::set_x_pos(float value) {
  set_has_x_pos();
  x_pos_ = value;
}

// -------------------------------------------------------------------

// ArtePb

// optional uint64 timestamp = 1;
inline bool ArtePb::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArtePb::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArtePb::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArtePb::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ArtePb::timestamp() const {
  return timestamp_;
}
inline void ArtePb::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .ArteSpikePb arte_spike_pb = 2;
inline bool ArtePb::has_arte_spike_pb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArtePb::set_has_arte_spike_pb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArtePb::clear_has_arte_spike_pb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArtePb::clear_arte_spike_pb() {
  if (arte_spike_pb_ != NULL) arte_spike_pb_->::ArteSpikePb::Clear();
  clear_has_arte_spike_pb();
}
inline const ::ArteSpikePb& ArtePb::arte_spike_pb() const {
  return arte_spike_pb_ != NULL ? *arte_spike_pb_ : *default_instance_->arte_spike_pb_;
}
inline ::ArteSpikePb* ArtePb::mutable_arte_spike_pb() {
  set_has_arte_spike_pb();
  if (arte_spike_pb_ == NULL) arte_spike_pb_ = new ::ArteSpikePb;
  return arte_spike_pb_;
}
inline ::ArteSpikePb* ArtePb::release_arte_spike_pb() {
  clear_has_arte_spike_pb();
  ::ArteSpikePb* temp = arte_spike_pb_;
  arte_spike_pb_ = NULL;
  return temp;
}

// optional .ArteLfpPb arte_lfp_pb = 3;
inline bool ArtePb::has_arte_lfp_pb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArtePb::set_has_arte_lfp_pb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArtePb::clear_has_arte_lfp_pb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArtePb::clear_arte_lfp_pb() {
  if (arte_lfp_pb_ != NULL) arte_lfp_pb_->::ArteLfpPb::Clear();
  clear_has_arte_lfp_pb();
}
inline const ::ArteLfpPb& ArtePb::arte_lfp_pb() const {
  return arte_lfp_pb_ != NULL ? *arte_lfp_pb_ : *default_instance_->arte_lfp_pb_;
}
inline ::ArteLfpPb* ArtePb::mutable_arte_lfp_pb() {
  set_has_arte_lfp_pb();
  if (arte_lfp_pb_ == NULL) arte_lfp_pb_ = new ::ArteLfpPb;
  return arte_lfp_pb_;
}
inline ::ArteLfpPb* ArtePb::release_arte_lfp_pb() {
  clear_has_arte_lfp_pb();
  ::ArteLfpPb* temp = arte_lfp_pb_;
  arte_lfp_pb_ = NULL;
  return temp;
}

// optional .ArteCommand arte_command_pb = 4;
inline bool ArtePb::has_arte_command_pb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArtePb::set_has_arte_command_pb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArtePb::clear_has_arte_command_pb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArtePb::clear_arte_command_pb() {
  if (arte_command_pb_ != NULL) arte_command_pb_->::ArteCommand::Clear();
  clear_has_arte_command_pb();
}
inline const ::ArteCommand& ArtePb::arte_command_pb() const {
  return arte_command_pb_ != NULL ? *arte_command_pb_ : *default_instance_->arte_command_pb_;
}
inline ::ArteCommand* ArtePb::mutable_arte_command_pb() {
  set_has_arte_command_pb();
  if (arte_command_pb_ == NULL) arte_command_pb_ = new ::ArteCommand;
  return arte_command_pb_;
}
inline ::ArteCommand* ArtePb::release_arte_command_pb() {
  clear_has_arte_command_pb();
  ::ArteCommand* temp = arte_command_pb_;
  arte_command_pb_ = NULL;
  return temp;
}

// optional .ArteEventStringPb arte_event_string_pb = 5;
inline bool ArtePb::has_arte_event_string_pb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArtePb::set_has_arte_event_string_pb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArtePb::clear_has_arte_event_string_pb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArtePb::clear_arte_event_string_pb() {
  if (arte_event_string_pb_ != NULL) arte_event_string_pb_->::ArteEventStringPb::Clear();
  clear_has_arte_event_string_pb();
}
inline const ::ArteEventStringPb& ArtePb::arte_event_string_pb() const {
  return arte_event_string_pb_ != NULL ? *arte_event_string_pb_ : *default_instance_->arte_event_string_pb_;
}
inline ::ArteEventStringPb* ArtePb::mutable_arte_event_string_pb() {
  set_has_arte_event_string_pb();
  if (arte_event_string_pb_ == NULL) arte_event_string_pb_ = new ::ArteEventStringPb;
  return arte_event_string_pb_;
}
inline ::ArteEventStringPb* ArtePb::release_arte_event_string_pb() {
  clear_has_arte_event_string_pb();
  ::ArteEventStringPb* temp = arte_event_string_pb_;
  arte_event_string_pb_ = NULL;
  return temp;
}

// optional .ArteRawBufferPb arte_raw_buffer_pb = 6;
inline bool ArtePb::has_arte_raw_buffer_pb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArtePb::set_has_arte_raw_buffer_pb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArtePb::clear_has_arte_raw_buffer_pb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArtePb::clear_arte_raw_buffer_pb() {
  if (arte_raw_buffer_pb_ != NULL) arte_raw_buffer_pb_->::ArteRawBufferPb::Clear();
  clear_has_arte_raw_buffer_pb();
}
inline const ::ArteRawBufferPb& ArtePb::arte_raw_buffer_pb() const {
  return arte_raw_buffer_pb_ != NULL ? *arte_raw_buffer_pb_ : *default_instance_->arte_raw_buffer_pb_;
}
inline ::ArteRawBufferPb* ArtePb::mutable_arte_raw_buffer_pb() {
  set_has_arte_raw_buffer_pb();
  if (arte_raw_buffer_pb_ == NULL) arte_raw_buffer_pb_ = new ::ArteRawBufferPb;
  return arte_raw_buffer_pb_;
}
inline ::ArteRawBufferPb* ArtePb::release_arte_raw_buffer_pb() {
  clear_has_arte_raw_buffer_pb();
  ::ArteRawBufferPb* temp = arte_raw_buffer_pb_;
  arte_raw_buffer_pb_ = NULL;
  return temp;
}

// optional .ArtePosPb arte_pos_pb = 7;
inline bool ArtePb::has_arte_pos_pb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArtePb::set_has_arte_pos_pb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArtePb::clear_has_arte_pos_pb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArtePb::clear_arte_pos_pb() {
  if (arte_pos_pb_ != NULL) arte_pos_pb_->::ArtePosPb::Clear();
  clear_has_arte_pos_pb();
}
inline const ::ArtePosPb& ArtePb::arte_pos_pb() const {
  return arte_pos_pb_ != NULL ? *arte_pos_pb_ : *default_instance_->arte_pos_pb_;
}
inline ::ArtePosPb* ArtePb::mutable_arte_pos_pb() {
  set_has_arte_pos_pb();
  if (arte_pos_pb_ == NULL) arte_pos_pb_ = new ::ArtePosPb;
  return arte_pos_pb_;
}
inline ::ArtePosPb* ArtePb::release_arte_pos_pb() {
  clear_has_arte_pos_pb();
  ::ArtePosPb* temp = arte_pos_pb_;
  arte_pos_pb_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_arte_5fpb_2eproto__INCLUDED
